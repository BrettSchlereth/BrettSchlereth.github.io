{"ast":null,"code":"var _jsxFileName = \"G:\\\\GithubWebsite\\\\portfoliowebsite\\\\src\\\\components\\\\CharterProject.js\";\nimport React from 'react';\nimport initSqlJs from 'sql.js';\nconst buttonStyle = {\n  false: {\n    textAlign: 'center',\n    height: '10%',\n    width: '25%',\n    backgroundColor: \"white\",\n    color: \"black\",\n    fontSize: \"1.5em\",\n    borderRadius: '5px',\n    border: '1px solid black',\n    fontWeight: 'bold'\n  },\n  true: {\n    textAlign: 'center',\n    height: '10%',\n    width: '25%',\n    backgroundColor: \"gray\",\n    color: \"black\",\n    fontSize: \"1.5em\",\n    borderRadius: '5px',\n    border: '1px solid black',\n    fontWeight: 'bold'\n  }\n};\nconst tableStyle = {\n  whiteSpace: 'pre-wrap',\n  width: '100%'\n};\nconst STARTINGMONTH = \"2021-09\";\nconst NUMOFMONTHS = 3;\n\nclass CharterProject extends React.Component {\n  constructor(props) {\n    super(props); //Loads the dataset at the starting of the page\n\n    this.loadDataset();\n    this.state = {\n      database: null,\n      points: null\n    };\n  }\n\n  addMonth(date, monthsAdding) {\n    var year = parseInt(date.slice(0, 4));\n    var month = parseInt(date.slice(5)) + 1;\n\n    if (month > 12) {\n      month = 1;\n      year += 1;\n    }\n\n    var date = String(year) + \"-\" + String(month);\n    return date;\n  } //Given one customer's name, this will return the customer's total points\n  //earned from all of their transactions\n\n\n  calculatePoints(name) {\n    //Queries the SQLite file for the customer's transactions\n    //console.log(name, \"amounts: \", amounts)\n    var pointsArr = []; //Calculates the points based on the transaction amount\n\n    var month = STARTINGMONTH;\n    console.log(\"month: \", month);\n\n    for (var j = 0; j < NUMOFMONTHS; j++) {\n      let points = 0;\n      var amounts = this.getQuery(\"SELECT Amount FROM transactionData WHERE CustomerName='\" + name + \"'\" + \" AND strftime('%Y-%m', Date)='\" + month + \"'\");\n\n      for (var i = 0; i < amounts.length; i++) {\n        var amount = Math.floor(amounts[i][0]);\n\n        if (amount > 100) {\n          points += 2 * (amount - 100) + 50;\n        } else if (amount > 50) {\n          points += amount - 50;\n        }\n      }\n\n      month = this.addMonth(month, j);\n      pointsArr.push(points);\n    } //Returns the customer's total points\n\n\n    return pointsArr;\n  }\n\n  getMonths() {\n    var text = \"\";\n    var date = STARTINGMONTH;\n\n    for (var i = 0; i < NUMOFMONTHS; i++) {\n      text += \" \" + date;\n      date = this.addMonth(date, i);\n    }\n\n    return text + \"\\n\";\n  } //Fetches a list of every customer and calculates each of their point totals\n\n\n  getPoints() {\n    //Queries the SQLite file for a list of every customer name\n    var namesArr = this.getQuery(\"SELECT DISTINCT CustomerName FROM transactionData\"); //Creates a dictionary that will hold each customer's name and their total points\n\n    var names = {}; //Assigns the total points to each name\n\n    for (var i = 0; i < namesArr.length; i++) {\n      names[namesArr[i][0]] = this.calculatePoints(namesArr[i][0]);\n    } //Sets the points state to equal a string with all of the names and points\n\n\n    this.printData(names); // this.setState({\n    //   points: this.printData(names)\n    // })\n  } //Returns the values of a given SQL query\n\n\n  getQuery(query) {\n    return this.state.database.exec(query)[0][\"values\"];\n  }\n\n  getValues(values) {\n    let output = [];\n    console.log(\"values: \", values);\n    values.forEach(value => output.push( /*#__PURE__*/React.createElement(\"td\", {\n      key: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 41\n      }\n    }, value)));\n    return output;\n  } //Disables the button after pressing the button\n\n\n  isDisabled() {\n    if (this.state.points != null) {\n      return true;\n    }\n\n    return false;\n  } //Fetches the database from the public files and stores it in the db state value\n\n\n  async loadDataset() {\n    const sqlPromise = initSqlJs({\n      locateFile: file => `sql-wasm.wasm`\n    });\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\n\n    try {\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n      var db = new SQL.Database(new Uint8Array(buf));\n      this.setState({\n        database: db\n      });\n    } //Throws an error if the database fails to load\n    catch (err) {\n      console.log(err);\n      console.log(\"Failed to load database\");\n    }\n  } //Formats the given dictionary into a string format to be printed on screen\n\n\n  printData(data) {\n    if (data != null) {\n      const reducer = (previousValue, currentValue) => previousValue + currentValue;\n\n      var output = [];\n      var i = 0;\n\n      for (const [key, value] of Object.entries(data)) {\n        output.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 33\n          }\n        }, String(key)), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 55\n          }\n        }, this.getValues(value)), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 87\n          }\n        }, String(value.reduce(reducer)))));\n      }\n\n      i += 1;\n      console.log(\"output: \", output);\n      this.setState({\n        points: output\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      style: tableStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }, this.state.points), /*#__PURE__*/React.createElement(\"button\", {\n      style: buttonStyle[this.isDisabled()],\n      disabled: this.isDisabled(),\n      onClick: () => this.getPoints(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }\n    }, \" Get Points \"));\n  }\n\n}\n\nexport default CharterProject;","map":{"version":3,"sources":["G:/GithubWebsite/portfoliowebsite/src/components/CharterProject.js"],"names":["React","initSqlJs","buttonStyle","false","textAlign","height","width","backgroundColor","color","fontSize","borderRadius","border","fontWeight","true","tableStyle","whiteSpace","STARTINGMONTH","NUMOFMONTHS","CharterProject","Component","constructor","props","loadDataset","state","database","points","addMonth","date","monthsAdding","year","parseInt","slice","month","String","calculatePoints","name","pointsArr","console","log","j","amounts","getQuery","i","length","amount","Math","floor","push","getMonths","text","getPoints","namesArr","names","printData","query","exec","getValues","values","output","forEach","value","isDisabled","sqlPromise","locateFile","file","dataPromise","fetch","then","res","arrayBuffer","SQL","buf","Promise","all","db","Database","Uint8Array","setState","err","data","reducer","previousValue","currentValue","key","Object","entries","reduce","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,QAAtB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,QADN;AAELC,IAAAA,MAAM,EAAE,KAFH;AAGLC,IAAAA,KAAK,EAAE,KAHF;AAILC,IAAAA,eAAe,EAAE,OAJZ;AAKLC,IAAAA,KAAK,EAAE,OALF;AAMLC,IAAAA,QAAQ,EAAE,OANL;AAOLC,IAAAA,YAAY,EAAE,KAPT;AAQLC,IAAAA,MAAM,EAAE,iBARH;AASLC,IAAAA,UAAU,EAAE;AATP,GADW;AAYlBC,EAAAA,IAAI,EAAE;AACJT,IAAAA,SAAS,EAAE,QADP;AAEJC,IAAAA,MAAM,EAAE,KAFJ;AAGJC,IAAAA,KAAK,EAAE,KAHH;AAIJC,IAAAA,eAAe,EAAE,MAJb;AAKJC,IAAAA,KAAK,EAAE,OALH;AAMJC,IAAAA,QAAQ,EAAE,OANN;AAOJC,IAAAA,YAAY,EAAE,KAPV;AAQJC,IAAAA,MAAM,EAAE,iBARJ;AASJC,IAAAA,UAAU,EAAE;AATR;AAZY,CAApB;AAyBA,MAAME,UAAU,GAAG;AACjBC,EAAAA,UAAU,EAAE,UADK;AAEjBT,EAAAA,KAAK,EAAE;AAFU,CAAnB;AAKA,MAAMU,aAAa,GAAG,SAAtB;AACA,MAAMC,WAAW,GAAG,CAApB;;AAEA,MAAMC,cAAN,SAA6BlB,KAAK,CAACmB,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AACA,SAAKC,WAAL;AACA,SAAKC,KAAL,GAAW;AACTC,MAAAA,QAAQ,EAAE,IADD;AAETC,MAAAA,MAAM,EAAE;AAFC,KAAX;AAID;;AAEDC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,YAAP,EAAqB;AAC3B,QAAIC,IAAI,GAAGC,QAAQ,CAACH,IAAI,CAACI,KAAL,CAAW,CAAX,EAAa,CAAb,CAAD,CAAnB;AACA,QAAIC,KAAK,GAAGF,QAAQ,CAACH,IAAI,CAACI,KAAL,CAAW,CAAX,CAAD,CAAR,GAA0B,CAAtC;;AACA,QAAIC,KAAK,GAAG,EAAZ,EAAgB;AACdA,MAAAA,KAAK,GAAG,CAAR;AACAH,MAAAA,IAAI,IAAI,CAAR;AACD;;AACD,QAAIF,IAAI,GAAGM,MAAM,CAACJ,IAAD,CAAN,GAAe,GAAf,GAAqBI,MAAM,CAACD,KAAD,CAAtC;AACA,WAAOL,IAAP;AACD,GApB0C,CAsB3C;AACA;;;AACAO,EAAAA,eAAe,CAACC,IAAD,EAAO;AACpB;AACA;AAEA,QAAIC,SAAS,GAAG,EAAhB,CAJoB,CAKpB;;AAEA,QAAIJ,KAAK,GAAGhB,aAAZ;AAEAqB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,KAAvB;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,WAApB,EAAiCsB,CAAC,EAAlC,EAAsC;AACpC,UAAId,MAAM,GAAG,CAAb;AAEA,UAAIe,OAAO,GAAG,KAAKC,QAAL,CAAc,4DAA4DN,IAA5D,GAAmE,GAAnE,GAAyE,gCAAzE,GAA4GH,KAA5G,GAAoH,GAAlI,CAAd;;AACA,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,YAAIE,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,OAAO,CAACE,CAAD,CAAP,CAAW,CAAX,CAAX,CAAb;;AACA,YAAIE,MAAM,GAAG,GAAb,EAAkB;AAChBnB,UAAAA,MAAM,IAAI,KAAKmB,MAAM,GAAG,GAAd,IAAqB,EAA/B;AACD,SAFD,MAGK,IAAIA,MAAM,GAAG,EAAb,EAAiB;AACpBnB,UAAAA,MAAM,IAAKmB,MAAM,GAAG,EAApB;AACD;AACF;;AACDZ,MAAAA,KAAK,GAAG,KAAKN,QAAL,CAAcM,KAAd,EAAqBO,CAArB,CAAR;AACAH,MAAAA,SAAS,CAACW,IAAV,CAAetB,MAAf;AACD,KAzBmB,CA0BpB;;;AACA,WAAOW,SAAP;AACD;;AAEDY,EAAAA,SAAS,GAAG;AACV,QAAIC,IAAI,GAAG,EAAX;AACA,QAAItB,IAAI,GAAGX,aAAX;;AACA,SAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,WAApB,EAAiCyB,CAAC,EAAlC,EAAsC;AACpCO,MAAAA,IAAI,IAAI,MAAMtB,IAAd;AACAA,MAAAA,IAAI,GAAG,KAAKD,QAAL,CAAcC,IAAd,EAAoBe,CAApB,CAAP;AACD;;AACD,WAAOO,IAAI,GAAG,IAAd;AACD,GA9D0C,CAgE3C;;;AACAC,EAAAA,SAAS,GAAG;AACV;AACA,QAAIC,QAAQ,GAAG,KAAKV,QAAL,CAAc,mDAAd,CAAf,CAFU,CAGV;;AACA,QAAIW,KAAK,GAAG,EAAZ,CAJU,CAKV;;AACA,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,QAAQ,CAACR,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCU,MAAAA,KAAK,CAACD,QAAQ,CAACT,CAAD,CAAR,CAAY,CAAZ,CAAD,CAAL,GAAwB,KAAKR,eAAL,CAAqBiB,QAAQ,CAACT,CAAD,CAAR,CAAY,CAAZ,CAArB,CAAxB;AACD,KARS,CASV;;;AACA,SAAKW,SAAL,CAAeD,KAAf,EAVU,CAWV;AACA;AACA;AACD,GA/E0C,CAiF3C;;;AACAX,EAAAA,QAAQ,CAACa,KAAD,EAAQ;AACd,WAAO,KAAK/B,KAAL,CAAWC,QAAX,CAAoB+B,IAApB,CAAyBD,KAAzB,EAAgC,CAAhC,EAAmC,QAAnC,CAAP;AACD;;AAEDE,EAAAA,SAAS,CAACC,MAAD,EAAS;AAChB,QAAIC,MAAM,GAAG,EAAb;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBmB,MAAxB;AACAA,IAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIF,MAAM,CAACX,IAAP,eAAY;AAAI,MAAA,GAAG,EAAEa,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBA,KAAjB,CAAZ,CAAxB;AACA,WAAOF,MAAP;AACD,GA3F0C,CA6F3C;;;AACAG,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKtC,KAAL,CAAWE,MAAX,IAAqB,IAAzB,EAA+B;AAC7B,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAnG0C,CAqG3C;;;AACA,QAAMH,WAAN,GAAqB;AACnB,UAAMwC,UAAU,GAAG7D,SAAS,CAAC;AAAC8D,MAAAA,UAAU,EAAEC,IAAI,IAAK;AAAtB,KAAD,CAA5B;AACA,UAAMC,WAAW,GAAGC,KAAK,CAAC,uBAAD,CAAL,CAA+BC,IAA/B,CAAoCC,GAAG,IAAIA,GAAG,CAACC,WAAJ,EAA3C,CAApB;;AACA,QAAI;AACF,YAAM,CAACC,GAAD,EAAMC,GAAN,IAAa,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACX,UAAD,EAAaG,WAAb,CAAZ,CAAzB;AACE,UAAIS,EAAE,GAAG,IAAIJ,GAAG,CAACK,QAAR,CAAiB,IAAIC,UAAJ,CAAeL,GAAf,CAAjB,CAAT;AACA,WAAKM,QAAL,CAAc;AACZrD,QAAAA,QAAQ,EAAEkD;AADE,OAAd;AAGH,KAND,CAOA;AACA,WAAOI,GAAP,EAAY;AACVzC,MAAAA,OAAO,CAACC,GAAR,CAAYwC,GAAZ;AACAzC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;AACF,GArH0C,CAuH3C;;;AACAe,EAAAA,SAAS,CAAC0B,IAAD,EAAO;AACd,QAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,YAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiCD,aAAa,GAAGC,YAAjE;;AACA,UAAIxB,MAAM,GAAG,EAAb;AACA,UAAIhB,CAAC,GAAG,CAAR;;AACA,WAAK,MAAM,CAACyC,GAAD,EAAMvB,KAAN,CAAX,IAA2BwB,MAAM,CAACC,OAAP,CAAeN,IAAf,CAA3B,EAAiD;AAC/CrB,QAAAA,MAAM,CAACX,IAAP,eAAY;AAAI,UAAA,GAAG,EAAEL,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKT,MAAM,CAACkD,GAAD,CAAX,CAAZ,eAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,KAAK3B,SAAL,CAAeI,KAAf,CAAL,CAAlC,eAAkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK3B,MAAM,CAAC2B,KAAK,CAAC0B,MAAN,CAAaN,OAAb,CAAD,CAAX,CAAlE,CAAZ;AACD;;AACDtC,MAAAA,CAAC,IAAI,CAAL;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBoB,MAAxB;AACA,WAAKmB,QAAL,CAAc;AACZpD,QAAAA,MAAM,EAAEiC;AADI,OAAd;AAGD;AACF;;AAED6B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAO,MAAA,KAAK,EAAEzE,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKS,KAAL,CAAWE,MADd,CADA,eAIE;AAAQ,MAAA,KAAK,EAAEvB,WAAW,CAAC,KAAK2D,UAAL,EAAD,CAA1B;AAA+C,MAAA,QAAQ,EAAE,KAAKA,UAAL,EAAzD;AAA4E,MAAA,OAAO,EAAE,MAAM,KAAKX,SAAL,EAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CADF;AAOD;;AAhJ0C;;AAmJ7C,eAAehC,cAAf","sourcesContent":["import React from 'react';\r\nimport initSqlJs from 'sql.js';\r\n\r\nconst buttonStyle = {\r\n  false: {\r\n    textAlign: 'center',\r\n    height: '10%',\r\n    width: '25%',\r\n    backgroundColor: \"white\",\r\n    color: \"black\",\r\n    fontSize: \"1.5em\",\r\n    borderRadius: '5px',\r\n    border: '1px solid black',\r\n    fontWeight: 'bold',\r\n  },\r\n  true: {\r\n    textAlign: 'center',\r\n    height: '10%',\r\n    width: '25%',\r\n    backgroundColor: \"gray\",\r\n    color: \"black\",\r\n    fontSize: \"1.5em\",\r\n    borderRadius: '5px',\r\n    border: '1px solid black',\r\n    fontWeight: 'bold',\r\n  }\r\n};\r\n\r\nconst tableStyle = {\r\n  whiteSpace: 'pre-wrap',\r\n  width: '100%'\r\n}\r\n\r\nconst STARTINGMONTH = \"2021-09\"\r\nconst NUMOFMONTHS = 3\r\n\r\nclass CharterProject extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //Loads the dataset at the starting of the page\r\n    this.loadDataset()\r\n    this.state={\r\n      database: null,\r\n      points: null,\r\n    }\r\n  }\r\n\r\n  addMonth(date, monthsAdding) {\r\n    var year = parseInt(date.slice(0,4))\r\n    var month = parseInt(date.slice(5)) + 1\r\n    if (month > 12) {\r\n      month = 1\r\n      year += 1\r\n    }\r\n    var date = String(year) + \"-\" + String(month)\r\n    return date\r\n  }\r\n\r\n  //Given one customer's name, this will return the customer's total points\r\n  //earned from all of their transactions\r\n  calculatePoints(name) {\r\n    //Queries the SQLite file for the customer's transactions\r\n    //console.log(name, \"amounts: \", amounts)\r\n\r\n    var pointsArr = []\r\n    //Calculates the points based on the transaction amount\r\n\r\n    var month = STARTINGMONTH\r\n\r\n    console.log(\"month: \", month)\r\n    for (var j = 0; j < NUMOFMONTHS; j++) {\r\n      let points = 0\r\n\r\n      var amounts = this.getQuery(\"SELECT Amount FROM transactionData WHERE CustomerName='\" + name + \"'\" + \" AND strftime('%Y-%m', Date)='\" + month + \"'\")\r\n      for (var i = 0; i < amounts.length; i++) {\r\n        var amount = Math.floor(amounts[i][0])\r\n        if (amount > 100) {\r\n          points += 2 * (amount - 100) + 50\r\n        }\r\n        else if (amount > 50) {\r\n          points += (amount - 50)\r\n        }\r\n      }\r\n      month = this.addMonth(month, j)\r\n      pointsArr.push(points)\r\n    }\r\n    //Returns the customer's total points\r\n    return pointsArr\r\n  }\r\n\r\n  getMonths() {\r\n    var text = \"\"\r\n    var date = STARTINGMONTH\r\n    for (var i = 0; i < NUMOFMONTHS; i++) {\r\n      text += \" \" + date\r\n      date = this.addMonth(date, i)\r\n    }\r\n    return text + \"\\n\"\r\n  }\r\n\r\n  //Fetches a list of every customer and calculates each of their point totals\r\n  getPoints() {\r\n    //Queries the SQLite file for a list of every customer name\r\n    var namesArr = this.getQuery(\"SELECT DISTINCT CustomerName FROM transactionData\")\r\n    //Creates a dictionary that will hold each customer's name and their total points\r\n    var names = {}\r\n    //Assigns the total points to each name\r\n    for (var i = 0; i < namesArr.length; i++) {\r\n      names[namesArr[i][0]] = this.calculatePoints(namesArr[i][0]);\r\n    }\r\n    //Sets the points state to equal a string with all of the names and points\r\n    this.printData(names)\r\n    // this.setState({\r\n    //   points: this.printData(names)\r\n    // })\r\n  }\r\n\r\n  //Returns the values of a given SQL query\r\n  getQuery(query) {\r\n    return this.state.database.exec(query)[0][\"values\"]\r\n  }\r\n\r\n  getValues(values) {\r\n    let output = []\r\n    console.log(\"values: \", values)\r\n    values.forEach(value => output.push(<td key={value}>{value}</td>))\r\n    return output\r\n  }\r\n\r\n  //Disables the button after pressing the button\r\n  isDisabled() {\r\n    if (this.state.points != null) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  //Fetches the database from the public files and stores it in the db state value\r\n  async loadDataset () {\r\n    const sqlPromise = initSqlJs({locateFile: file => `sql-wasm.wasm`});\r\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\r\n    try {\r\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n        var db = new SQL.Database(new Uint8Array(buf));\r\n        this.setState({\r\n          database: db\r\n        })\r\n    }\r\n    //Throws an error if the database fails to load\r\n    catch (err) {\r\n      console.log(err);\r\n      console.log(\"Failed to load database\")\r\n    }\r\n  }\r\n\r\n  //Formats the given dictionary into a string format to be printed on screen\r\n  printData(data) {\r\n    if (data != null) {\r\n      const reducer = (previousValue, currentValue) => previousValue + currentValue;\r\n      var output = []\r\n      var i = 0\r\n      for (const [key, value] of Object.entries(data)) {\r\n        output.push(<tr key={i}><td>{String(key)}</td><td>{this.getValues(value)}</td><td>{String(value.reduce(reducer))}</td></tr>)\r\n      }\r\n      i += 1\r\n      console.log(\"output: \", output)\r\n      this.setState({\r\n        points: output\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n      <table style={tableStyle}>\r\n        {this.state.points}\r\n      </table>\r\n        <button style={buttonStyle[this.isDisabled()]} disabled={this.isDisabled()} onClick={() => this.getPoints()}> Get Points </button>\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default CharterProject;\r\n"]},"metadata":{},"sourceType":"module"}