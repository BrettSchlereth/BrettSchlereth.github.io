{"ast":null,"code":"var _jsxFileName = \"G:\\\\GithubWebsite\\\\portfoliowebsite\\\\src\\\\components\\\\BlackjackGame.js\";\nimport React from 'react';\nimport { useState, setState } from 'react';\nimport '../App.css';\nimport { Box, Image } from 'rebass';\nimport CardsDisplay from './CardsDisplay.js';\nimport twoOfSpades from '../images/2ofSpades.png';\nimport threeOfSpades from '../images/3ofSpades.png';\nimport fourOfSpades from '../images/4ofSpades.png';\nimport fiveOfSpades from '../images/5ofSpades.png';\nimport sixOfSpades from '../images/6ofSpades.png';\nimport sevenOfSpades from '../images/7ofSpades.png';\nimport eightOfSpades from '../images/8ofSpades.png';\nimport nineOfSpades from '../images/9ofSpades.png';\nimport tenOfSpades from '../images/10ofSpades.png';\nimport aceOfSpades from '../images/aceOfSpades.png';\nconst cardStyle = {\n  height: 'auto',\n  maxWidth: '20%'\n};\nconst cardValues = {\n  2: twoOfSpades,\n  3: threeOfSpades,\n  4: fourOfSpades,\n  5: fiveOfSpades,\n  6: sixOfSpades,\n  7: sevenOfSpades,\n  8: eightOfSpades,\n  9: nineOfSpades,\n  10: tenOfSpades,\n  11: aceOfSpades\n};\nconst gameStyle = {\n  background: 'brown',\n  align: 'center',\n  display: 'flex'\n};\nconst playerSideStyle = {\n  width: '50%'\n};\nconst aiSideStyle = {\n  height: '100%',\n  width: '50%'\n};\nconst dealerStyle = {\n  height: 'auto',\n  maxHeight: '25em',\n  background: 'blue'\n};\nconst playerStyle = {\n  background: 'green'\n};\nconst aiStyle = {\n  background: 'gray'\n};\nconst gameButtons = {\n  margin: 'auto',\n  width: '100%',\n  align: 'center'\n};\nconst gameButton = {\n  textAlign: 'center',\n  height: '10%',\n  width: '50%'\n};\nvar deck;\nvar aiDeck;\nvar dealerHand;\nvar playerHand;\nvar aiDealerHand;\nvar aiPlayerHand;\n\nclass BlackjackGame extends React.Component {\n  constructor(props) {\n    startGame();\n    super(props);\n    this.state = {\n      playerHand: [],\n      aiHand: []\n    };\n  }\n\n  hit(playerType) {\n    console.log(\"hit\");\n    console.log('playerHand', playerHand, 'aiHand', aiPlayerHand);\n\n    switch (playerType) {\n      case \"player\":\n        this.setState({\n          playerHand: playerHand.push(deck.pop())\n        }, () => {\n          console.log(deck.length, aiDeck.length);\n        });\n        break;\n\n      case \"dealer\":\n        console.log(\"dealer hit\");\n        break;\n\n      case \"aiPlayer\":\n        break;\n\n      case \"aiDealer\":\n        break;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Box, {\n      style: gameStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      style: playerSideStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      style: dealerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, \"Dealer\", getCards(dealerHand, \"dealer\")), /*#__PURE__*/React.createElement(Box, {\n      style: playerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, \"Player\", getCards(playerHand, \"player\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: gameButtons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.hit(\"player\"),\n      style: gameButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, \"HIT\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: stay,\n      style: gameButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, \"STAY\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: restart,\n      style: gameButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, \"PLAY AGAIN\")))), /*#__PURE__*/React.createElement(Box, {\n      style: aiSideStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      style: dealerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, \"AI Dealer\", getCards(aiDealerHand, \"dealer\")), /*#__PURE__*/React.createElement(Box, {\n      style: aiStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, \"AI Player\", getCards(aiPlayerHand, \"aiPlayer\"))));\n  }\n\n}\n\nfunction startGame() {\n  buildDeck();\n  dealCards();\n  checkForBlackjack(); //get player moves until stay or bust\n  //get dealer moves\n  //let the ai play\n  //let the ai's dealer play\n  //add scores\n  //clear on restart\n\n  console.log('start');\n}\n\nfunction buildDeck() {\n  deck = [];\n\n  for (var i = 0; i < 8; i++) {\n    for (var j = 2; j < 12; j++) {\n      if (j === 10) {\n        deck.push(j);\n        deck.push(j);\n        deck.push(j);\n      }\n\n      deck.push(j);\n    }\n  }\n\n  shuffle(deck);\n  aiDeck = deck;\n  console.log(\"building deck\");\n}\n\nfunction dealCards() {\n  playerHand = [];\n  dealerHand = [];\n  aiPlayerHand = [];\n  aiDealerHand = [];\n\n  for (var i = 0; i < 2; i++) {\n    playerHand.push(deck.pop());\n    dealerHand.push(deck.pop());\n  }\n\n  aiPlayerHand = playerHand.slice();\n  aiDealerHand = dealerHand.slice();\n  console.log(\"dealing cards\");\n}\n\nfunction checkForBlackjack(dealer, player) {\n  if (getTotalCardValue(dealer) != 21 && getTotalCardValue(player) != 21) {\n    return False;\n  }\n\n  return True;\n}\n\nfunction getCards(hand, playerType) {\n  console.log(playerType, hand);\n  var cards = [];\n\n  for (var i = 0; i < hand.length; i++) {\n    var card = hand[i];\n    cards.push(getCard(card, i));\n\n    if (playerType === \"dealer\") {\n      i = hand.length;\n    }\n  }\n\n  return cards;\n}\n\nfunction getCard(card, index) {\n  return /*#__PURE__*/React.createElement(Image, {\n    key: index.toString(),\n    style: cardStyle,\n    src: cardValues[card],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  });\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nfunction stay() {}\n\nfunction restart() {} // function getRandomIntInclusive(min, max) {\n//   min = Math.ceil(min);\n//   max = Math.floor(max);\n//   return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n// }\n\n\nexport default BlackjackGame;","map":{"version":3,"sources":["G:/GithubWebsite/portfoliowebsite/src/components/BlackjackGame.js"],"names":["React","useState","setState","Box","Image","CardsDisplay","twoOfSpades","threeOfSpades","fourOfSpades","fiveOfSpades","sixOfSpades","sevenOfSpades","eightOfSpades","nineOfSpades","tenOfSpades","aceOfSpades","cardStyle","height","maxWidth","cardValues","gameStyle","background","align","display","playerSideStyle","width","aiSideStyle","dealerStyle","maxHeight","playerStyle","aiStyle","gameButtons","margin","gameButton","textAlign","deck","aiDeck","dealerHand","playerHand","aiDealerHand","aiPlayerHand","BlackjackGame","Component","constructor","props","startGame","state","aiHand","hit","playerType","console","log","push","pop","length","render","getCards","stay","restart","buildDeck","dealCards","checkForBlackjack","i","j","shuffle","slice","dealer","player","getTotalCardValue","False","True","hand","cards","card","getCard","index","toString","array","currentIndex","randomIndex","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, setState } from 'react';\r\nimport '../App.css';\r\nimport { Box, Image } from 'rebass'\r\nimport CardsDisplay from './CardsDisplay.js'\r\nimport twoOfSpades from '../images/2ofSpades.png'\r\nimport threeOfSpades from '../images/3ofSpades.png'\r\nimport fourOfSpades from '../images/4ofSpades.png'\r\nimport fiveOfSpades from '../images/5ofSpades.png'\r\nimport sixOfSpades from '../images/6ofSpades.png'\r\nimport sevenOfSpades from '../images/7ofSpades.png'\r\nimport eightOfSpades from '../images/8ofSpades.png'\r\nimport nineOfSpades from '../images/9ofSpades.png'\r\nimport tenOfSpades from '../images/10ofSpades.png'\r\nimport aceOfSpades from '../images/aceOfSpades.png'\r\n\r\nconst cardStyle = {\r\n  height: 'auto',\r\n  maxWidth: '20%',\r\n}\r\n\r\nconst cardValues = {\r\n  2: twoOfSpades,\r\n  3: threeOfSpades,\r\n  4: fourOfSpades,\r\n  5: fiveOfSpades,\r\n  6: sixOfSpades,\r\n  7: sevenOfSpades,\r\n  8: eightOfSpades,\r\n  9: nineOfSpades,\r\n  10: tenOfSpades,\r\n  11: aceOfSpades\r\n}\r\n\r\nconst gameStyle = {\r\n  background: 'brown',\r\n  align: 'center',\r\n  display: 'flex'\r\n}\r\n\r\nconst playerSideStyle = {\r\n  width: '50%',\r\n}\r\n\r\nconst aiSideStyle = {\r\n  height: '100%',\r\n  width: '50%',\r\n}\r\n\r\nconst dealerStyle = {\r\n  height: 'auto',\r\n  maxHeight: '25em',\r\n  background: 'blue',\r\n}\r\n\r\nconst playerStyle = {\r\n  background: 'green',\r\n}\r\n\r\nconst aiStyle = {\r\n  background: 'gray',\r\n}\r\n\r\nconst gameButtons = {\r\n  margin: 'auto',\r\n  width: '100%',\r\n  align: 'center',\r\n}\r\n\r\nconst gameButton = {\r\n  textAlign: 'center',\r\n  height: '10%',\r\n  width: '50%'\r\n}\r\n\r\nvar deck;\r\nvar aiDeck;\r\nvar dealerHand;\r\nvar playerHand;\r\nvar aiDealerHand;\r\nvar aiPlayerHand;\r\n\r\nclass BlackjackGame extends React.Component {\r\n  constructor(props) {\r\n    startGame()\r\n    super(props);\r\n    this.state = {\r\n      playerHand : [],\r\n      aiHand: []\r\n    }\r\n  }\r\n\r\n  hit(playerType) {\r\n   console.log(\"hit\")\r\n   console.log('playerHand', playerHand, 'aiHand', aiPlayerHand)\r\n   switch (playerType) {\r\n     case \"player\":\r\n       this.setState({\r\n         playerHand: playerHand.push(deck.pop())\r\n       },\r\n        () => {console.log(deck.length, aiDeck.length)})\r\n        break;\r\n     case \"dealer\":\r\n        console.log(\"dealer hit\")\r\n        break;\r\n     case \"aiPlayer\":\r\n        break;\r\n     case \"aiDealer\":\r\n        break;\r\n  }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box style={gameStyle}>\r\n        <Box style={playerSideStyle}>\r\n          <Box style={dealerStyle}>\r\n            Dealer\r\n            {getCards(dealerHand, \"dealer\")}\r\n          </Box>\r\n        <Box style={playerStyle}>\r\n          Player\r\n          {getCards(playerHand, \"player\")}\r\n          <div style={gameButtons}>\r\n            <button onClick={() => this.hit(\"player\")} style={gameButton}>HIT</button>\r\n            <button onClick={stay} style={gameButton}>STAY</button>\r\n            <button onClick={restart} style={gameButton}>PLAY AGAIN</button>\r\n          </div>\r\n          </Box>\r\n        </Box>\r\n        <Box style={aiSideStyle}>\r\n          <Box style={dealerStyle}>\r\n            AI Dealer\r\n            {getCards(aiDealerHand, \"dealer\")}\r\n          </Box>\r\n          <Box style={aiStyle}>\r\n            AI Player\r\n            {getCards(aiPlayerHand, \"aiPlayer\")}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nfunction startGame() {\r\n  buildDeck()\r\n  dealCards()\r\n  checkForBlackjack()\r\n  //get player moves until stay or bust\r\n  //get dealer moves\r\n  //let the ai play\r\n  //let the ai's dealer play\r\n  //add scores\r\n  //clear on restart\r\n  console.log('start')\r\n}\r\n\r\nfunction buildDeck() {\r\n  deck = []\r\n  for (var i = 0; i < 8; i++) {\r\n    for (var j = 2; j < 12; j++) {\r\n      if (j === 10) {\r\n        deck.push(j)\r\n        deck.push(j)\r\n        deck.push(j)\r\n      }\r\n      deck.push(j)\r\n    }\r\n  }\r\n  shuffle(deck)\r\n  aiDeck = deck\r\n  console.log(\"building deck\")\r\n}\r\n\r\nfunction dealCards() {\r\n  playerHand = [];\r\n  dealerHand = [];\r\n  aiPlayerHand = [];\r\n  aiDealerHand = [];\r\n  for (var i = 0; i < 2; i++) {\r\n    playerHand.push(deck.pop())\r\n    dealerHand.push(deck.pop())\r\n  }\r\n  aiPlayerHand = playerHand.slice()\r\n  aiDealerHand = dealerHand.slice()\r\n  console.log(\"dealing cards\")\r\n}\r\nfunction checkForBlackjack(dealer, player) {\r\n  if (getTotalCardValue(dealer) != 21 && getTotalCardValue(player) != 21) {\r\n    return False\r\n  }\r\n  return True\r\n}\r\n\r\nfunction getCards(hand, playerType) {\r\n  console.log(playerType, hand)\r\n  var cards = []\r\n  for (var i=0; i<hand.length; i++) {\r\n      var card = hand[i]\r\n      cards.push(getCard(card, i))\r\n      if (playerType === \"dealer\") {\r\n        i = hand.length\r\n      }\r\n  }\r\n  return cards;\r\n}\r\n\r\nfunction getCard(card, index) {\r\n  return (\r\n    <Image key={index.toString()} style={cardStyle} src={cardValues[card]}/>\r\n  );\r\n}\r\n\r\nfunction shuffle(array) {\r\n  var currentIndex = array.length,  randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]];\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nfunction stay() {\r\n\r\n}\r\n\r\nfunction restart() {\r\n\r\n}\r\n\r\n// function getRandomIntInclusive(min, max) {\r\n//   min = Math.ceil(min);\r\n//   max = Math.floor(max);\r\n//   return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\r\n// }\r\n\r\n\r\nexport default BlackjackGame;\r\n"]},"metadata":{},"sourceType":"module"}