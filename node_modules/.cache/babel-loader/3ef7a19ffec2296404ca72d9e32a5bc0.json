{"ast":null,"code":"var _jsxFileName = \"G:\\\\GithubWebsite\\\\portfoliowebsite\\\\src\\\\components\\\\CharterProject.js\";\nimport React from 'react';\nimport initSqlJs from 'sql.js'; //https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\n\nclass CharterProject extends React.Component {\n  constructor(props) {\n    super(props);\n    const database = this.loadDataset().then(function (result) {\n      return result;\n    }).catch(console.log(\"failed to set database\"));\n    console.log(\"db after: \", database);\n    this.state = {\n      SQLresponse: \"nothing\"\n    };\n  }\n\n  async loadDataset() {\n    const sqlPromise = initSqlJs({\n      locateFile: file => `sql-wasm.wasm`\n    });\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\n\n    try {\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n      var db = new SQL.Database(new Uint8Array(buf));\n      console.log(\"db: \", db);\n      return db;\n    } catch (err) {\n      console.log(err);\n      console.log(\"Failed to load database\");\n    }\n  } // const db = new SQL.Database(new Uint8Array(buf));\n  // this.setState({\n  //   database: new SQL.Database(new Uint8Array(buf))\n  // })\n  // res = db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")\n  // const res = db.exec(\".scheme tablename\")\n  // console.log(\"response: \", db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0])\n  // this.setState({\n  //   SQLresponse: db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0][2]\n  // })\n  //{this.state.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]}\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, \"returned from script again\", this.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]);\n  }\n\n}\n\nexport default CharterProject;","map":{"version":3,"sources":["G:/GithubWebsite/portfoliowebsite/src/components/CharterProject.js"],"names":["React","initSqlJs","CharterProject","Component","constructor","props","database","loadDataset","then","result","catch","console","log","state","SQLresponse","sqlPromise","locateFile","file","dataPromise","fetch","res","arrayBuffer","SQL","buf","Promise","all","db","Database","Uint8Array","err","render","exec"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,QAAtB,C,CAGA;;AAMA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,UAAMC,QAAQ,GAAG,KAAKC,WAAL,GAAmBC,IAAnB,CAAwB,UAASC,MAAT,EAAiB;AACxD,aAAOA,MAAP;AACD,KAFgB,EAEdC,KAFc,CAERC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAFQ,CAAjB;AAGAD,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,QAA1B;AACA,SAAKO,KAAL,GAAW;AACTC,MAAAA,WAAW,EAAE;AADJ,KAAX;AAGD;;AAED,QAAMP,WAAN,GAAqB;AACnB,UAAMQ,UAAU,GAAGd,SAAS,CAAC;AAACe,MAAAA,UAAU,EAAEC,IAAI,IAAK;AAAtB,KAAD,CAA5B;AACA,UAAMC,WAAW,GAAGC,KAAK,CAAC,uBAAD,CAAL,CAA+BX,IAA/B,CAAoCY,GAAG,IAAIA,GAAG,CAACC,WAAJ,EAA3C,CAApB;;AACA,QAAI;AACF,YAAM,CAACC,GAAD,EAAMC,GAAN,IAAa,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACV,UAAD,EAAaG,WAAb,CAAZ,CAAzB;AACA,UAAIQ,EAAE,GAAG,IAAIJ,GAAG,CAACK,QAAR,CAAiB,IAAIC,UAAJ,CAAeL,GAAf,CAAjB,CAAT;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBc,EAApB;AACA,aAAOA,EAAP;AACD,KALD,CAMA,OAAOG,GAAP,EAAY;AACVlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;AACF,GA1B0C,CA8BzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;;;AAEEkB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAEG,KAAKxB,QAAL,CAAcyB,IAAd,CAAmB,qDAAnB,EAA0E,CAA1E,EAA6E,QAA7E,EAAuF,CAAvF,EAA0F,CAA1F,CAFH,CADF;AAKD;;AAjD0C;;AAoD7C,eAAe7B,cAAf","sourcesContent":["import React from 'react';\r\nimport initSqlJs from 'sql.js';\r\n\r\n\r\n//https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\r\n\r\n\r\n\r\n\r\n\r\nclass CharterProject extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const database = this.loadDataset().then(function(result) {\r\n      return result\r\n    }).catch(console.log(\"failed to set database\"))\r\n    console.log(\"db after: \", database)\r\n    this.state={\r\n      SQLresponse: \"nothing\"\r\n    }\r\n  }\r\n\r\n  async loadDataset () {\r\n    const sqlPromise = initSqlJs({locateFile: file => `sql-wasm.wasm`});\r\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\r\n    try {\r\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n      var db = new SQL.Database(new Uint8Array(buf));\r\n      console.log(\"db: \", db)\r\n      return db\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n      console.log(\"Failed to load database\")\r\n    }\r\n  }\r\n\r\n\r\n\r\n    // const db = new SQL.Database(new Uint8Array(buf));\r\n\r\n    // this.setState({\r\n    //   database: new SQL.Database(new Uint8Array(buf))\r\n    // })\r\n    // res = db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")\r\n    // const res = db.exec(\".scheme tablename\")\r\n    // console.log(\"response: \", db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0])\r\n    // this.setState({\r\n    //   SQLresponse: db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0][2]\r\n    // })\r\n//{this.state.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]}\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        returned from script again\r\n        {this.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]}\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default CharterProject;\r\n"]},"metadata":{},"sourceType":"module"}