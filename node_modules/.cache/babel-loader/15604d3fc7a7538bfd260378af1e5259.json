{"ast":null,"code":"var _jsxFileName = \"G:\\\\GithubWebsite\\\\portfoliowebsite\\\\src\\\\components\\\\CharterProject.js\";\nimport React from 'react';\nimport initSqlJs from 'sql.js'; //https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\n\nvar database;\n\nclass CharterProject extends React.Component {\n  constructor(props) {\n    super(props);\n    database = Promise(this.loadDataset().then(function (result) {\n      return result;\n    }).then(function (result) {\n      return result;\n    }).catch(console.log(\"failed to set database\")));\n    console.log(\"db after: \", database);\n    this.state = {\n      SQLresponse: \"nothing\"\n    };\n  }\n\n  async loadDataset() {\n    const sqlPromise = initSqlJs({\n      locateFile: file => `sql-wasm.wasm`\n    });\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\n\n    try {\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n      var db = new SQL.Database(new Uint8Array(buf));\n      console.log(\"db: \", db);\n      return db;\n    } catch (err) {\n      console.log(err);\n      console.log(\"Failed to load database\");\n    }\n  } // var db = new SQL.Database(new Uint8Array(buf));\n  // console.log(\"db: \", db)\n  // return db\n  // const db = new SQL.Database(new Uint8Array(buf));\n  // this.setState({\n  //   database: new SQL.Database(new Uint8Array(buf))\n  // })\n  // res = db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")\n  // const res = db.exec(\".scheme tablename\")\n  // console.log(\"response: \", db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0])\n  // this.setState({\n  //   SQLresponse: db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0][2]\n  // })\n  //{this.state.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]}\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, \"returned from script again\", this.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]);\n  }\n\n}\n\nexport default CharterProject;","map":{"version":3,"sources":["G:/GithubWebsite/portfoliowebsite/src/components/CharterProject.js"],"names":["React","initSqlJs","database","CharterProject","Component","constructor","props","Promise","loadDataset","then","result","catch","console","log","state","SQLresponse","sqlPromise","locateFile","file","dataPromise","fetch","res","arrayBuffer","SQL","buf","all","db","Database","Uint8Array","err","render","exec"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,QAAtB,C,CAGA;;AAIA,IAAIC,QAAJ;;AAEA,MAAMC,cAAN,SAA6BH,KAAK,CAACI,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACAJ,IAAAA,QAAQ,GAAGK,OAAO,CAAC,KAAKC,WAAL,GAAmBC,IAAnB,CAAwB,UAASC,MAAT,EAAiB;AAC1D,aAAOA,MAAP;AACD,KAFkB,EAEhBD,IAFgB,CAEX,UAASC,MAAT,EAAiB;AACvB,aAAOA,MAAP;AACD,KAJkB,EAIhBC,KAJgB,CAIVC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAJU,CAAD,CAAlB;AAKAD,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BX,QAA1B;AACA,SAAKY,KAAL,GAAW;AACTC,MAAAA,WAAW,EAAE;AADJ,KAAX;AAGD;;AAED,QAAMP,WAAN,GAAqB;AACnB,UAAMQ,UAAU,GAAGf,SAAS,CAAC;AAACgB,MAAAA,UAAU,EAAEC,IAAI,IAAK;AAAtB,KAAD,CAA5B;AACA,UAAMC,WAAW,GAAGC,KAAK,CAAC,uBAAD,CAAL,CAA+BX,IAA/B,CAAoCY,GAAG,IAAIA,GAAG,CAACC,WAAJ,EAA3C,CAApB;;AACA,QAAI;AACF,YAAM,CAACC,GAAD,EAAMC,GAAN,IAAa,MAAMjB,OAAO,CAACkB,GAAR,CAAY,CAACT,UAAD,EAAaG,WAAb,CAAZ,CAAzB;AACE,UAAIO,EAAE,GAAG,IAAIH,GAAG,CAACI,QAAR,CAAiB,IAAIC,UAAJ,CAAeJ,GAAf,CAAjB,CAAT;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBa,EAApB;AACA,aAAOA,EAAP;AACH,KALD,CAMA,OAAOG,GAAP,EAAY;AACVjB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;AACF,GA5B0C,CA6B3C;AACA;AACA;AAGE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;;;AAEEiB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAEG,KAAK5B,QAAL,CAAc6B,IAAd,CAAmB,qDAAnB,EAA0E,CAA1E,EAA6E,QAA7E,EAAuF,CAAvF,EAA0F,CAA1F,CAFH,CADF;AAKD;;AArD0C;;AAwD7C,eAAe5B,cAAf","sourcesContent":["import React from 'react';\r\nimport initSqlJs from 'sql.js';\r\n\r\n\r\n//https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\r\n\r\n\r\n\r\nvar database\r\n\r\nclass CharterProject extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    database = Promise(this.loadDataset().then(function(result) {\r\n      return result\r\n    }).then(function(result) {\r\n      return result\r\n    }).catch(console.log(\"failed to set database\")))\r\n    console.log(\"db after: \", database)\r\n    this.state={\r\n      SQLresponse: \"nothing\"\r\n    }\r\n  }\r\n\r\n  async loadDataset () {\r\n    const sqlPromise = initSqlJs({locateFile: file => `sql-wasm.wasm`});\r\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\r\n    try {\r\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n        var db = new SQL.Database(new Uint8Array(buf));\r\n        console.log(\"db: \", db)\r\n        return db\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n      console.log(\"Failed to load database\")\r\n    }\r\n  }\r\n  // var db = new SQL.Database(new Uint8Array(buf));\r\n  // console.log(\"db: \", db)\r\n  // return db\r\n\r\n\r\n    // const db = new SQL.Database(new Uint8Array(buf));\r\n\r\n    // this.setState({\r\n    //   database: new SQL.Database(new Uint8Array(buf))\r\n    // })\r\n    // res = db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")\r\n    // const res = db.exec(\".scheme tablename\")\r\n    // console.log(\"response: \", db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0])\r\n    // this.setState({\r\n    //   SQLresponse: db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0][2]\r\n    // })\r\n//{this.state.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]}\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        returned from script again\r\n        {this.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]}\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default CharterProject;\r\n"]},"metadata":{},"sourceType":"module"}