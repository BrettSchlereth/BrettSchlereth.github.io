{"ast":null,"code":"var _jsxFileName = \"G:\\\\GithubWebsite\\\\portfoliowebsite\\\\src\\\\components\\\\BlackjackGame.js\";\nimport React from 'react'; //import { setState } from 'react'\n\nimport '../App.css';\nimport { Box, Image } from 'rebass';\nimport twoOfSpades from '../images/2ofSpades.png';\nimport threeOfSpades from '../images/3ofSpades.png';\nimport fourOfSpades from '../images/4ofSpades.png';\nimport fiveOfSpades from '../images/5ofSpades.png';\nimport sixOfSpades from '../images/6ofSpades.png';\nimport sevenOfSpades from '../images/7ofSpades.png';\nimport eightOfSpades from '../images/8ofSpades.png';\nimport nineOfSpades from '../images/9ofSpades.png';\nimport tenOfSpades from '../images/10ofSpades.png';\nimport aceOfSpades from '../images/aceOfSpades.png';\nimport * as tf from '@tensorflow/tfjs';\nconst cardStyle = {\n  height: 'auto',\n  maxWidth: '20%'\n};\nconst cardValues = {\n  2: twoOfSpades,\n  3: threeOfSpades,\n  4: fourOfSpades,\n  5: fiveOfSpades,\n  6: sixOfSpades,\n  7: sevenOfSpades,\n  8: eightOfSpades,\n  9: nineOfSpades,\n  10: tenOfSpades,\n  11: aceOfSpades\n};\n\nclass Hand {\n  constructor(handOwner) {\n    this.owner = handOwner;\n    this.cards = [];\n    this.soft = 0;\n    this.blackjack = false;\n    this.count = 0;\n    this.total = 0;\n    this.busted = false;\n  }\n\n  addCard(deck) {\n    this.cards.push(deck.pop());\n    this.getTotalCardValue();\n  }\n\n  getTotalCardValue() {\n    var total = 0;\n    var handCount = 0;\n    this.cards.forEach(card => {\n      if (card <= 6) {\n        handCount += 1;\n      } else if (card >= 10) {\n        handCount -= 1;\n      }\n\n      this.count = handCount;\n\n      if (card === 11 && total + card > 21) {\n        card = 1;\n      } else if (card === 11 && this.soft === 0) {\n        this.soft = 1;\n      } else if (total + card > 21 && this.soft === 1) {\n        total -= 10;\n        this.soft = 0;\n      }\n\n      total += card;\n    });\n    this.total = total;\n\n    if (total > 21) {\n      this.busted = true;\n    } else {\n      this.busted = false;\n    }\n  }\n\n}\n\nconst gameStyle = {\n  background: 'brown',\n  align: 'center',\n  display: 'flex'\n};\nconst playerSideStyle = {\n  width: '50%'\n};\nconst aiSideStyle = {\n  height: '100%',\n  width: '50%'\n};\nconst dealerStyle = {\n  height: 'auto',\n  maxHeight: '25em',\n  background: 'blue'\n};\nconst playerStyle = {\n  background: 'green'\n};\nconst aiStyle = {\n  background: 'gray'\n};\nconst gameButtons = {\n  margin: 'auto',\n  width: '100%',\n  align: 'center'\n};\nconst gameButton = {\n  textAlign: 'center',\n  height: '10%',\n  width: '50%'\n};\nvar deck;\nvar aiDeck;\nvar dealerHand = new Hand(\"dealer\");\nvar playerHand = new Hand(\"player\");\nvar aiDealerHand = new Hand(\"dealer\");\nvar aiPlayerHand = new Hand(\"player\");\n\nclass BlackjackGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadTheModel();\n    this.startGame();\n    this.state = {\n      playerHand: [],\n      dealerHand: [],\n      aiHand: [],\n      hitDisabled: false,\n      stayDisabled: false,\n      restartDisabled: true,\n      playerDone: false,\n      dealerDone: false,\n      message: \"hit or stay\",\n      aiMessage: \"\"\n    };\n  }\n\n  checkForBlackjack(dealer, player) {\n    if (dealer.total === 21 && player.total === 21) {\n      this.setState({\n        message: \"Push!\"\n      });\n      return true;\n    } else if (dealer.total === 21) {\n      this.setState({\n        message: \"Dealer has blackjack!\"\n      });\n      return true;\n    } else if (player.total === 21) {\n      this.setState({\n        message: \"Player has blackjack!\"\n      });\n      return true;\n    } else return false;\n  }\n\n  getCards(hand, playerType) {\n    var cards = [];\n\n    for (var i = 0; i < hand.cards.length; i++) {\n      var card = hand.cards[i];\n      cards.push(getCard(card, i));\n\n      if (playerType === \"dealer\" & this.state.playerDone === false) {\n        i = hand.cards.length;\n      }\n    }\n\n    return cards;\n  }\n\n  getDealerMoves() {\n    console.log(\"starting dealer moves\");\n\n    while (dealerHand.total < 17) {\n      this.hit(\"dealer\");\n    }\n\n    this.getWinner(dealerHand, playerHand);\n    this.setState({\n      restartDisabled: false\n    });\n  }\n\n  getWinner(dealer, player) {\n    var winnerMessage = \"\";\n    console.log(\"dealerTotal:\", dealer.total);\n\n    if (dealer.busted) {\n      winnerMessage = \"Dealer Busted! Player Wins!\";\n    } else if (dealer.total > player.total) {\n      winnerMessage = \"Dealer Wins!\";\n    } else if (player.total > dealer.total) {\n      winnerMessage = \"Player Wins!\";\n    } else {\n      winnerMessage = \"Push!\";\n    }\n\n    this.setState({\n      message: winnerMessage\n    });\n  }\n\n  hit(handOwner) {\n    switch (handOwner) {\n      case \"player\":\n        this.setState({\n          playerHand: playerHand.addCard(deck)\n        });\n\n        if (playerHand.busted) {\n          console.log(\"bust\");\n          this.setState({\n            hitDisabled: true,\n            stayDisabled: true,\n            restartDisabled: false,\n            playerDone: true,\n            dealerDone: true,\n            message: \"Player busted! Dealer Wins!\"\n          });\n        }\n\n        break;\n\n      case \"dealer\":\n        this.setState({\n          dealerHand: dealerHand.addCard(deck)\n        });\n\n        if (dealerHand.busted) {\n          this.setState({\n            dealerDone: true,\n            message: \"Dealer Busted! Player Wins!\"\n          });\n        } else if (dealerHand.total >= 17 && dealerHand.total <= 21) {\n          this.setState({\n            dealerDone: true,\n            restartDisabled: false\n          });\n        }\n\n        break;\n\n      case \"aiPlayer\":\n        break;\n\n      case \"aiDealer\":\n        break;\n\n      default:\n        console.log(\"Error: Player type not recognized\");\n        break;\n    }\n  }\n\n  async loadTheModel() {\n    var model;\n\n    try {\n      model = await tf.loadLayersModel('model.json');\n      model.summary();\n      var input = tf.tensor([[8, 20, 0, 0, 1]]);\n      var output = model.predict(input[0]).print();\n      console.log(\"output: \", output);\n    } catch (err) {\n      console.log(err);\n      console.log(\"failed load model\");\n    }\n  }\n\n  startGame() {\n    this.setState({\n      playerHand: [],\n      dealerHand: [],\n      playerDone: false,\n      dealerDone: false,\n      hitDisabled: false,\n      stayDisabled: false,\n      restartDisabled: true,\n      message: \"hit or stay\"\n    });\n    buildDeck();\n    dealCards();\n\n    if (this.checkForBlackjack(dealerHand, playerHand) === true) {\n      this.setState({\n        hitDisabled: true,\n        stayDisabled: true,\n        restartDisabled: false\n      });\n    } else {//get player moves until stay or bust\n      //get dealer moves\n      //let the ai play\n      //let the ai's dealer play\n      //add scores\n      //clear on restart\n    }\n\n    console.log('start');\n  }\n\n  stay() {\n    this.setState({\n      hitDisabled: true,\n      stayDisabled: true,\n      playerDone: true\n    });\n    this.getDealerMoves();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Box, {\n      style: gameStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      style: playerSideStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }\n    }, this.state.message), /*#__PURE__*/React.createElement(Box, {\n      style: dealerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }\n    }, \"Dealer\", this.getCards(dealerHand, \"dealer\")), /*#__PURE__*/React.createElement(Box, {\n      style: playerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }\n    }, \"Player\", this.getCards(playerHand, \"player\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: gameButtons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: this.state.hitDisabled,\n      onClick: () => this.hit(\"player\"),\n      style: gameButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 13\n      }\n    }, \"HIT\"), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: this.state.stayDisabled,\n      onClick: () => this.stay(),\n      style: gameButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 13\n      }\n    }, \"STAY\"), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: this.state.restartDisabled,\n      onClick: () => this.startGame(),\n      style: gameButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 13\n      }\n    }, \"PLAY AGAIN\")))), /*#__PURE__*/React.createElement(Box, {\n      style: aiSideStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }\n    }, this.state.aiMessage), /*#__PURE__*/React.createElement(Box, {\n      style: dealerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }\n    }, \"AI Dealer\", this.getCards(aiDealerHand, \"dealer\")), /*#__PURE__*/React.createElement(Box, {\n      style: aiStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }\n    }, \"AI Player\", this.getCards(aiPlayerHand, \"aiPlayer\"))));\n  }\n\n}\n\nfunction buildDeck() {\n  deck = [];\n\n  for (var i = 0; i < 8; i++) {\n    for (var j = 2; j < 12; j++) {\n      if (j === 10) {\n        deck.push(j);\n        deck.push(j);\n        deck.push(j);\n      }\n\n      deck.push(j);\n    }\n  }\n\n  shuffle(deck);\n  aiDeck = deck;\n  console.log(\"building deck\");\n}\n\nfunction dealCards() {\n  playerHand.cards = [];\n  dealerHand.cards = [];\n  aiPlayerHand.cards = [];\n  aiDealerHand.cards = [];\n\n  for (var i = 0; i < 2; i++) {\n    playerHand.addCard(deck);\n    dealerHand.addCard(deck);\n  }\n\n  aiPlayerHand.cards = playerHand.cards.slice();\n  aiDealerHand.cards = dealerHand.cards.slice();\n  console.log(\"dealing cards\");\n}\n\nfunction getCard(card, index) {\n  return /*#__PURE__*/React.createElement(Image, {\n    key: index.toString(),\n    style: cardStyle,\n    src: cardValues[card],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 5\n    }\n  });\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nexport default BlackjackGame;","map":{"version":3,"sources":["G:/GithubWebsite/portfoliowebsite/src/components/BlackjackGame.js"],"names":["React","Box","Image","twoOfSpades","threeOfSpades","fourOfSpades","fiveOfSpades","sixOfSpades","sevenOfSpades","eightOfSpades","nineOfSpades","tenOfSpades","aceOfSpades","tf","cardStyle","height","maxWidth","cardValues","Hand","constructor","handOwner","owner","cards","soft","blackjack","count","total","busted","addCard","deck","push","pop","getTotalCardValue","handCount","forEach","card","gameStyle","background","align","display","playerSideStyle","width","aiSideStyle","dealerStyle","maxHeight","playerStyle","aiStyle","gameButtons","margin","gameButton","textAlign","aiDeck","dealerHand","playerHand","aiDealerHand","aiPlayerHand","BlackjackGame","Component","props","loadTheModel","startGame","state","aiHand","hitDisabled","stayDisabled","restartDisabled","playerDone","dealerDone","message","aiMessage","checkForBlackjack","dealer","player","setState","getCards","hand","playerType","i","length","getCard","getDealerMoves","console","log","hit","getWinner","winnerMessage","model","loadLayersModel","summary","input","tensor","output","predict","print","err","buildDeck","dealCards","stay","render","j","shuffle","slice","index","toString","array","currentIndex","randomIndex","Math","floor","random"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAO,YAAP;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,QAA3B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,MAAM,EAAE,MADQ;AAEhBC,EAAAA,QAAQ,EAAE;AAFM,CAAlB;AAKA,MAAMC,UAAU,GAAG;AACjB,KAAGd,WADc;AAEjB,KAAGC,aAFc;AAGjB,KAAGC,YAHc;AAIjB,KAAGC,YAJc;AAKjB,KAAGC,WALc;AAMjB,KAAGC,aANc;AAOjB,KAAGC,aAPc;AAQjB,KAAGC,YARc;AASjB,MAAIC,WATa;AAUjB,MAAIC;AAVa,CAAnB;;AAaA,MAAMM,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,SAAKC,KAAL,GAAaD,SAAb;AACA,SAAKE,KAAL,GAAa,EAAb;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,MAAL,GAAc,KAAd;AACD;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,SAAKP,KAAL,CAAWQ,IAAX,CAAgBD,IAAI,CAACE,GAAL,EAAhB;AACA,SAAKC,iBAAL;AACD;;AAEDA,EAAAA,iBAAiB,GAAG;AAClB,QAAIN,KAAK,GAAG,CAAZ;AACA,QAAIO,SAAS,GAAG,CAAhB;AACA,SAAKX,KAAL,CAAWY,OAAX,CAAmBC,IAAI,IAAI;AACzB,UAAIA,IAAI,IAAI,CAAZ,EAAe;AACbF,QAAAA,SAAS,IAAI,CAAb;AACD,OAFD,MAGK,IAAIE,IAAI,IAAI,EAAZ,EAAgB;AACnBF,QAAAA,SAAS,IAAI,CAAb;AACD;;AACD,WAAKR,KAAL,GAAaQ,SAAb;;AACA,UAAIE,IAAI,KAAK,EAAT,IAAeT,KAAK,GAAGS,IAAR,GAAe,EAAlC,EAAsC;AACpCA,QAAAA,IAAI,GAAG,CAAP;AACD,OAFD,MAGK,IAAIA,IAAI,KAAK,EAAT,IAAe,KAAKZ,IAAL,KAAc,CAAjC,EAAoC;AACvC,aAAKA,IAAL,GAAY,CAAZ;AACD,OAFI,MAGA,IAAIG,KAAK,GAAGS,IAAR,GAAe,EAAf,IAAqB,KAAKZ,IAAL,KAAc,CAAvC,EAA0C;AAC7CG,QAAAA,KAAK,IAAI,EAAT;AACA,aAAKH,IAAL,GAAY,CAAZ;AACD;;AACDG,MAAAA,KAAK,IAAIS,IAAT;AACD,KAnBD;AAqBA,SAAKT,KAAL,GAAaA,KAAb;;AACA,QAAIA,KAAK,GAAG,EAAZ,EAAgB;AACd,WAAKC,MAAL,GAAc,IAAd;AACD,KAFD,MAGK;AACH,WAAKA,MAAL,GAAc,KAAd;AACD;AACF;;AA/CQ;;AAkDX,MAAMS,SAAS,GAAG;AAChBC,EAAAA,UAAU,EAAE,OADI;AAEhBC,EAAAA,KAAK,EAAE,QAFS;AAGhBC,EAAAA,OAAO,EAAE;AAHO,CAAlB;AAMA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,KAAK,EAAE;AADe,CAAxB;AAIA,MAAMC,WAAW,GAAG;AAClB3B,EAAAA,MAAM,EAAE,MADU;AAElB0B,EAAAA,KAAK,EAAE;AAFW,CAApB;AAKA,MAAME,WAAW,GAAG;AAClB5B,EAAAA,MAAM,EAAE,MADU;AAElB6B,EAAAA,SAAS,EAAE,MAFO;AAGlBP,EAAAA,UAAU,EAAE;AAHM,CAApB;AAMA,MAAMQ,WAAW,GAAG;AAClBR,EAAAA,UAAU,EAAE;AADM,CAApB;AAIA,MAAMS,OAAO,GAAG;AACdT,EAAAA,UAAU,EAAE;AADE,CAAhB;AAIA,MAAMU,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE,MADU;AAElBP,EAAAA,KAAK,EAAE,MAFW;AAGlBH,EAAAA,KAAK,EAAE;AAHW,CAApB;AAMA,MAAMW,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAE,QADM;AAEjBnC,EAAAA,MAAM,EAAE,KAFS;AAGjB0B,EAAAA,KAAK,EAAE;AAHU,CAAnB;AAMA,IAAIZ,IAAJ;AACA,IAAIsB,MAAJ;AACA,IAAIC,UAAU,GAAG,IAAIlC,IAAJ,CAAS,QAAT,CAAjB;AACA,IAAImC,UAAU,GAAG,IAAInC,IAAJ,CAAS,QAAT,CAAjB;AACA,IAAIoC,YAAY,GAAG,IAAIpC,IAAJ,CAAS,QAAT,CAAnB;AACA,IAAIqC,YAAY,GAAG,IAAIrC,IAAJ,CAAS,QAAT,CAAnB;;AAGA,MAAMsC,aAAN,SAA4BxD,KAAK,CAACyD,SAAlC,CAA4C;AAC1CtC,EAAAA,WAAW,CAACuC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,YAAL;AACA,SAAKC,SAAL;AACA,SAAKC,KAAL,GAAa;AACXR,MAAAA,UAAU,EAAG,EADF;AAEXD,MAAAA,UAAU,EAAE,EAFD;AAGXU,MAAAA,MAAM,EAAE,EAHG;AAIXC,MAAAA,WAAW,EAAE,KAJF;AAKXC,MAAAA,YAAY,EAAE,KALH;AAMXC,MAAAA,eAAe,EAAE,IANN;AAOXC,MAAAA,UAAU,EAAE,KAPD;AAQXC,MAAAA,UAAU,EAAE,KARD;AASXC,MAAAA,OAAO,EAAE,aATE;AAUXC,MAAAA,SAAS,EAAE;AAVA,KAAb;AAaD;;AAEDC,EAAAA,iBAAiB,CAACC,MAAD,EAASC,MAAT,EAAiB;AAChC,QAAID,MAAM,CAAC7C,KAAP,KAAiB,EAAjB,IAAuB8C,MAAM,CAAC9C,KAAP,KAAiB,EAA5C,EAAgD;AAC9C,WAAK+C,QAAL,CAAc;AACZL,QAAAA,OAAO,EAAE;AADG,OAAd;AAGA,aAAO,IAAP;AACD,KALD,MAMK,IAAIG,MAAM,CAAC7C,KAAP,KAAiB,EAArB,EAAyB;AAC5B,WAAK+C,QAAL,CAAc;AACZL,QAAAA,OAAO,EAAE;AADG,OAAd;AAGA,aAAO,IAAP;AACD,KALI,MAMA,IAAII,MAAM,CAAC9C,KAAP,KAAiB,EAArB,EAAyB;AAC5B,WAAK+C,QAAL,CAAc;AACZL,QAAAA,OAAO,EAAE;AADG,OAAd;AAGA,aAAO,IAAP;AACD,KALI,MAMA,OAAO,KAAP;AACJ;;AAEHM,EAAAA,QAAQ,CAACC,IAAD,EAAOC,UAAP,EAAmB;AACzB,QAAItD,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIuD,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,IAAI,CAACrD,KAAL,CAAWwD,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,UAAI1C,IAAI,GAAGwC,IAAI,CAACrD,KAAL,CAAWuD,CAAX,CAAX;AACAvD,MAAAA,KAAK,CAACQ,IAAN,CAAWiD,OAAO,CAAC5C,IAAD,EAAO0C,CAAP,CAAlB;;AACA,UAAID,UAAU,KAAK,QAAf,GAA0B,KAAKf,KAAL,CAAWK,UAAX,KAA0B,KAAxD,EAA+D;AAC7DW,QAAAA,CAAC,GAAGF,IAAI,CAACrD,KAAL,CAAWwD,MAAf;AACD;AACJ;;AACD,WAAOxD,KAAP;AACD;;AAED0D,EAAAA,cAAc,GAAG;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,WAAO9B,UAAU,CAAC1B,KAAX,GAAmB,EAA1B,EAA8B;AAC5B,WAAKyD,GAAL,CAAS,QAAT;AACD;;AACD,SAAKC,SAAL,CAAehC,UAAf,EAA2BC,UAA3B;AACA,SAAKoB,QAAL,CAAc;AACZR,MAAAA,eAAe,EAAE;AADL,KAAd;AAGD;;AAEDmB,EAAAA,SAAS,CAACb,MAAD,EAASC,MAAT,EAAiB;AACxB,QAAIa,aAAa,GAAG,EAApB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BX,MAAM,CAAC7C,KAAnC;;AACA,QAAI6C,MAAM,CAAC5C,MAAX,EAAmB;AACjB0D,MAAAA,aAAa,GAAG,6BAAhB;AACD,KAFD,MAGK,IAAId,MAAM,CAAC7C,KAAP,GAAe8C,MAAM,CAAC9C,KAA1B,EAAiC;AACpC2D,MAAAA,aAAa,GAAG,cAAhB;AACD,KAFI,MAGA,IAAIb,MAAM,CAAC9C,KAAP,GAAe6C,MAAM,CAAC7C,KAA1B,EAAiC;AACpC2D,MAAAA,aAAa,GAAG,cAAhB;AACD,KAFI,MAGA;AAACA,MAAAA,aAAa,GAAG,OAAhB;AAAwB;;AAC9B,SAAKZ,QAAL,CAAc;AACZL,MAAAA,OAAO,EAAEiB;AADG,KAAd;AAGD;;AAEDF,EAAAA,GAAG,CAAC/D,SAAD,EAAY;AACd,YAAQA,SAAR;AACE,WAAK,QAAL;AACE,aAAKqD,QAAL,CAAc;AACZpB,UAAAA,UAAU,EAAEA,UAAU,CAACzB,OAAX,CAAmBC,IAAnB;AADA,SAAd;;AAGA,YAAIwB,UAAU,CAAC1B,MAAf,EAAuB;AACrBsD,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAKT,QAAL,CAAc;AACdV,YAAAA,WAAW,EAAE,IADC;AAEdC,YAAAA,YAAY,EAAE,IAFA;AAGdC,YAAAA,eAAe,EAAE,KAHH;AAIdC,YAAAA,UAAU,EAAE,IAJE;AAKdC,YAAAA,UAAU,EAAE,IALE;AAMdC,YAAAA,OAAO,EAAE;AANK,WAAd;AAQD;;AACD;;AACF,WAAK,QAAL;AACG,aAAKK,QAAL,CAAc;AACZrB,UAAAA,UAAU,EAAEA,UAAU,CAACxB,OAAX,CAAmBC,IAAnB;AADA,SAAd;;AAGA,YAAIuB,UAAU,CAACzB,MAAf,EAAuB;AACrB,eAAK8C,QAAL,CAAc;AACZN,YAAAA,UAAU,EAAE,IADA;AAEZC,YAAAA,OAAO,EAAE;AAFG,WAAd;AAID,SALD,MAMK,IAAIhB,UAAU,CAAC1B,KAAX,IAAoB,EAApB,IAA0B0B,UAAU,CAAC1B,KAAX,IAAoB,EAAlD,EAAsD;AACzD,eAAK+C,QAAL,CAAc;AACZN,YAAAA,UAAU,EAAE,IADA;AAEZF,YAAAA,eAAe,EAAE;AAFL,WAAd;AAID;;AACD;;AACH,WAAK,UAAL;AACG;;AACH,WAAK,UAAL;AACG;;AACH;AACGgB,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACA;AAxCL;AA2CA;;AAED,QAAMvB,YAAN,GAAsB;AACpB,QAAI2B,KAAJ;;AACA,QAAI;AACFA,MAAAA,KAAK,GAAG,MAAMzE,EAAE,CAAC0E,eAAH,CAAmB,YAAnB,CAAd;AACAD,MAAAA,KAAK,CAACE,OAAN;AACA,UAAIC,KAAK,GAAG5E,EAAE,CAAC6E,MAAH,CAAU,CAAC,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAD,CAAV,CAAZ;AACA,UAAIC,MAAM,GAAGL,KAAK,CAACM,OAAN,CAAcH,KAAK,CAAC,CAAD,CAAnB,EAAwBI,KAAxB,EAAb;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBS,MAAxB;AACD,KAND,CAOA,OAAOG,GAAP,EAAY;AACVb,MAAAA,OAAO,CAACC,GAAR,CAAYY,GAAZ;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AAGF;;AAEDtB,EAAAA,SAAS,GAAG;AACV,SAAKa,QAAL,CAAc;AACZpB,MAAAA,UAAU,EAAE,EADA;AAEZD,MAAAA,UAAU,EAAE,EAFA;AAGZc,MAAAA,UAAU,EAAE,KAHA;AAIZC,MAAAA,UAAU,EAAE,KAJA;AAKZJ,MAAAA,WAAW,EAAE,KALD;AAMZC,MAAAA,YAAY,EAAE,KANF;AAOZC,MAAAA,eAAe,EAAE,IAPL;AAQZG,MAAAA,OAAO,EAAE;AARG,KAAd;AAUA2B,IAAAA,SAAS;AACTC,IAAAA,SAAS;;AACT,QAAI,KAAK1B,iBAAL,CAAuBlB,UAAvB,EAAmCC,UAAnC,MAAmD,IAAvD,EAA6D;AAC3D,WAAKoB,QAAL,CAAc;AACZV,QAAAA,WAAW,EAAE,IADD;AAEZC,QAAAA,YAAY,EAAE,IAFF;AAGZC,QAAAA,eAAe,EAAE;AAHL,OAAd;AAKD,KAND,MAOK,CACH;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDgB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;;AAEDe,EAAAA,IAAI,GAAG;AACL,SAAKxB,QAAL,CAAc;AACZV,MAAAA,WAAW,EAAE,IADD;AAEZC,MAAAA,YAAY,EAAE,IAFF;AAGZE,MAAAA,UAAU,EAAE;AAHA,KAAd;AAKA,SAAKc,cAAL;AACD;;AAEDkB,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE9D,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAEI,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKqB,KAAL,CAAWO,OADd,CADF,eAIE,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAEzB,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEG,KAAK+B,QAAL,CAActB,UAAd,EAA0B,QAA1B,CAFH,CAJF,eAQA,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAEP,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEG,KAAK6B,QAAL,CAAcrB,UAAd,EAA0B,QAA1B,CAFH,eAGE;AAAK,MAAA,KAAK,EAAEN,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,QAAQ,EAAE,KAAKc,KAAL,CAAWE,WAA7B;AAA0C,MAAA,OAAO,EAAE,MAAM,KAAKoB,GAAL,CAAS,QAAT,CAAzD;AAA6E,MAAA,KAAK,EAAElC,UAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAQ,MAAA,QAAQ,EAAE,KAAKY,KAAL,CAAWG,YAA7B;AAA2C,MAAA,OAAO,EAAE,MAAM,KAAKiC,IAAL,EAA1D;AAAuE,MAAA,KAAK,EAAEhD,UAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,MAAA,QAAQ,EAAE,KAAKY,KAAL,CAAWI,eAA7B;AAA8C,MAAA,OAAO,EAAE,MAAM,KAAKL,SAAL,EAA7D;AAA+E,MAAA,KAAK,EAAEX,UAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,CAHF,CARA,CADF,eAmBE,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAEP,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKmB,KAAL,CAAWQ,SADd,CADF,eAIE,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE1B,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEG,KAAK+B,QAAL,CAAcpB,YAAd,EAA4B,QAA5B,CAFH,CAJF,eAQE,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAER,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEG,KAAK4B,QAAL,CAAcnB,YAAd,EAA4B,UAA5B,CAFH,CARF,CAnBF,CADF;AAmCD;;AA/NyC;;AAkO5C,SAASwC,SAAT,GAAqB;AACnBlE,EAAAA,IAAI,GAAG,EAAP;;AACA,OAAK,IAAIgD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,SAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIA,CAAC,KAAK,EAAV,EAAc;AACZtE,QAAAA,IAAI,CAACC,IAAL,CAAUqE,CAAV;AACAtE,QAAAA,IAAI,CAACC,IAAL,CAAUqE,CAAV;AACAtE,QAAAA,IAAI,CAACC,IAAL,CAAUqE,CAAV;AACD;;AACDtE,MAAAA,IAAI,CAACC,IAAL,CAAUqE,CAAV;AACD;AACF;;AACDC,EAAAA,OAAO,CAACvE,IAAD,CAAP;AACAsB,EAAAA,MAAM,GAAGtB,IAAT;AACAoD,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;;AAED,SAASc,SAAT,GAAqB;AACnB3C,EAAAA,UAAU,CAAC/B,KAAX,GAAmB,EAAnB;AACA8B,EAAAA,UAAU,CAAC9B,KAAX,GAAmB,EAAnB;AACAiC,EAAAA,YAAY,CAACjC,KAAb,GAAqB,EAArB;AACAgC,EAAAA,YAAY,CAAChC,KAAb,GAAqB,EAArB;;AACA,OAAK,IAAIuD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BxB,IAAAA,UAAU,CAACzB,OAAX,CAAmBC,IAAnB;AACAuB,IAAAA,UAAU,CAACxB,OAAX,CAAmBC,IAAnB;AACD;;AACD0B,EAAAA,YAAY,CAACjC,KAAb,GAAqB+B,UAAU,CAAC/B,KAAX,CAAiB+E,KAAjB,EAArB;AACA/C,EAAAA,YAAY,CAAChC,KAAb,GAAqB8B,UAAU,CAAC9B,KAAX,CAAiB+E,KAAjB,EAArB;AACApB,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;;AAED,SAASH,OAAT,CAAiB5C,IAAjB,EAAuBmE,KAAvB,EAA8B;AAC5B,sBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEA,KAAK,CAACC,QAAN,EAAZ;AAA8B,IAAA,KAAK,EAAEzF,SAArC;AAAgD,IAAA,GAAG,EAAEG,UAAU,CAACkB,IAAD,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD;;AAID,SAASiE,OAAT,CAAiBI,KAAjB,EAAwB;AACtB,MAAIC,YAAY,GAAGD,KAAK,CAAC1B,MAAzB;AAAA,MAAkC4B,WAAlC,CADsB,CAGtB;;AACA,SAAO,MAAMD,YAAb,EAA2B;AAEzB;AACAC,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,YAA3B,CAAd;AACAA,IAAAA,YAAY,GAJa,CAMzB;;AACA,KAACD,KAAK,CAACC,YAAD,CAAN,EAAsBD,KAAK,CAACE,WAAD,CAA3B,IAA4C,CAC1CF,KAAK,CAACE,WAAD,CADqC,EACtBF,KAAK,CAACC,YAAD,CADiB,CAA5C;AAED;;AAED,SAAOD,KAAP;AACD;;AAED,eAAehD,aAAf","sourcesContent":["import React from 'react';\r\n//import { setState } from 'react'\r\nimport '../App.css';\r\nimport { Box, Image } from 'rebass'\r\nimport twoOfSpades from '../images/2ofSpades.png'\r\nimport threeOfSpades from '../images/3ofSpades.png'\r\nimport fourOfSpades from '../images/4ofSpades.png'\r\nimport fiveOfSpades from '../images/5ofSpades.png'\r\nimport sixOfSpades from '../images/6ofSpades.png'\r\nimport sevenOfSpades from '../images/7ofSpades.png'\r\nimport eightOfSpades from '../images/8ofSpades.png'\r\nimport nineOfSpades from '../images/9ofSpades.png'\r\nimport tenOfSpades from '../images/10ofSpades.png'\r\nimport aceOfSpades from '../images/aceOfSpades.png'\r\nimport * as tf from '@tensorflow/tfjs'\r\n\r\nconst cardStyle = {\r\n  height: 'auto',\r\n  maxWidth: '20%',\r\n}\r\n\r\nconst cardValues = {\r\n  2: twoOfSpades,\r\n  3: threeOfSpades,\r\n  4: fourOfSpades,\r\n  5: fiveOfSpades,\r\n  6: sixOfSpades,\r\n  7: sevenOfSpades,\r\n  8: eightOfSpades,\r\n  9: nineOfSpades,\r\n  10: tenOfSpades,\r\n  11: aceOfSpades\r\n}\r\n\r\nclass Hand {\r\n  constructor(handOwner) {\r\n    this.owner = handOwner;\r\n    this.cards = [];\r\n    this.soft = 0;\r\n    this.blackjack = false;\r\n    this.count = 0;\r\n    this.total = 0;\r\n    this.busted = false;\r\n  }\r\n\r\n  addCard(deck) {\r\n    this.cards.push(deck.pop())\r\n    this.getTotalCardValue()\r\n  }\r\n\r\n  getTotalCardValue() {\r\n    var total = 0\r\n    var handCount = 0\r\n    this.cards.forEach(card => {\r\n      if (card <= 6) {\r\n        handCount += 1\r\n      }\r\n      else if (card >= 10) {\r\n        handCount -= 1\r\n      }\r\n      this.count = handCount\r\n      if (card === 11 && total + card > 21) {\r\n        card = 1\r\n      }\r\n      else if (card === 11 && this.soft === 0) {\r\n        this.soft = 1\r\n      }\r\n      else if (total + card > 21 && this.soft === 1) {\r\n        total -= 10\r\n        this.soft = 0\r\n      }\r\n      total += card\r\n    });\r\n\r\n    this.total = total\r\n    if (total > 21) {\r\n      this.busted = true;\r\n    }\r\n    else {\r\n      this.busted = false;\r\n    }\r\n  }\r\n}\r\n\r\nconst gameStyle = {\r\n  background: 'brown',\r\n  align: 'center',\r\n  display: 'flex'\r\n}\r\n\r\nconst playerSideStyle = {\r\n  width: '50%',\r\n}\r\n\r\nconst aiSideStyle = {\r\n  height: '100%',\r\n  width: '50%',\r\n}\r\n\r\nconst dealerStyle = {\r\n  height: 'auto',\r\n  maxHeight: '25em',\r\n  background: 'blue',\r\n}\r\n\r\nconst playerStyle = {\r\n  background: 'green',\r\n}\r\n\r\nconst aiStyle = {\r\n  background: 'gray',\r\n}\r\n\r\nconst gameButtons = {\r\n  margin: 'auto',\r\n  width: '100%',\r\n  align: 'center',\r\n}\r\n\r\nconst gameButton = {\r\n  textAlign: 'center',\r\n  height: '10%',\r\n  width: '50%'\r\n}\r\n\r\nvar deck;\r\nvar aiDeck;\r\nvar dealerHand = new Hand(\"dealer\");\r\nvar playerHand = new Hand(\"player\");\r\nvar aiDealerHand = new Hand(\"dealer\");\r\nvar aiPlayerHand = new Hand(\"player\");\r\n\r\n\r\nclass BlackjackGame extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.loadTheModel()\r\n    this.startGame();\r\n    this.state = {\r\n      playerHand : [],\r\n      dealerHand: [],\r\n      aiHand: [],\r\n      hitDisabled: false,\r\n      stayDisabled: false,\r\n      restartDisabled: true,\r\n      playerDone: false,\r\n      dealerDone: false,\r\n      message: \"hit or stay\",\r\n      aiMessage: \"\",\r\n    }\r\n\r\n  }\r\n\r\n  checkForBlackjack(dealer, player) {\r\n    if (dealer.total === 21 && player.total === 21) {\r\n      this.setState({\r\n        message: \"Push!\",\r\n      });\r\n      return true;\r\n    }\r\n    else if (dealer.total === 21) {\r\n      this.setState({\r\n        message: \"Dealer has blackjack!\"\r\n      })\r\n      return true\r\n    }\r\n    else if (player.total === 21) {\r\n      this.setState({\r\n        message: \"Player has blackjack!\"\r\n      })\r\n      return true\r\n    }\r\n    else return false\r\n    }\r\n\r\n  getCards(hand, playerType) {\r\n    var cards = []\r\n    for (var i=0; i<hand.cards.length; i++) {\r\n        var card = hand.cards[i]\r\n        cards.push(getCard(card, i))\r\n        if (playerType === \"dealer\" & this.state.playerDone === false) {\r\n          i = hand.cards.length\r\n        }\r\n    }\r\n    return cards;\r\n  }\r\n\r\n  getDealerMoves() {\r\n    console.log(\"starting dealer moves\")\r\n    while (dealerHand.total < 17) {\r\n      this.hit(\"dealer\")\r\n    }\r\n    this.getWinner(dealerHand, playerHand)\r\n    this.setState({\r\n      restartDisabled: false\r\n    })\r\n  }\r\n\r\n  getWinner(dealer, player) {\r\n    var winnerMessage = \"\"\r\n    console.log(\"dealerTotal:\", dealer.total)\r\n    if (dealer.busted) {\r\n      winnerMessage = \"Dealer Busted! Player Wins!\"\r\n    }\r\n    else if (dealer.total > player.total) {\r\n      winnerMessage = \"Dealer Wins!\"\r\n    }\r\n    else if (player.total > dealer.total) {\r\n      winnerMessage = \"Player Wins!\"\r\n    }\r\n    else {winnerMessage = \"Push!\"}\r\n    this.setState({\r\n      message: winnerMessage\r\n    })\r\n  }\r\n\r\n  hit(handOwner) {\r\n   switch (handOwner) {\r\n     case \"player\":\r\n       this.setState({\r\n         playerHand: playerHand.addCard(deck)\r\n       })\r\n       if (playerHand.busted) {\r\n         console.log(\"bust\");\r\n         this.setState({\r\n         hitDisabled: true,\r\n         stayDisabled: true,\r\n         restartDisabled: false,\r\n         playerDone: true,\r\n         dealerDone: true,\r\n         message: \"Player busted! Dealer Wins!\"\r\n       })\r\n       }\r\n       break;\r\n     case \"dealer\":\r\n        this.setState({\r\n          dealerHand: dealerHand.addCard(deck)\r\n        })\r\n        if (dealerHand.busted) {\r\n          this.setState({\r\n            dealerDone: true,\r\n            message: \"Dealer Busted! Player Wins!\"\r\n          })\r\n        }\r\n        else if (dealerHand.total >= 17 && dealerHand.total <= 21) {\r\n          this.setState({\r\n            dealerDone: true,\r\n            restartDisabled: false,\r\n          })\r\n        }\r\n        break;\r\n     case \"aiPlayer\":\r\n        break;\r\n     case \"aiDealer\":\r\n        break;\r\n     default:\r\n        console.log(\"Error: Player type not recognized\")\r\n        break;\r\n      }\r\n\r\n  }\r\n\r\n  async loadTheModel () {\r\n    var model\r\n    try {\r\n      model = await tf.loadLayersModel('model.json');\r\n      model.summary();\r\n      var input = tf.tensor([[8, 20, 0, 0, 1]])\r\n      var output = model.predict(input[0]).print()\r\n      console.log(\"output: \", output)\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n      console.log(\"failed load model\");\r\n    }\r\n\r\n\r\n  }\r\n\r\n  startGame() {\r\n    this.setState({\r\n      playerHand: [],\r\n      dealerHand: [],\r\n      playerDone: false,\r\n      dealerDone: false,\r\n      hitDisabled: false,\r\n      stayDisabled: false,\r\n      restartDisabled: true,\r\n      message: \"hit or stay\",\r\n    })\r\n    buildDeck()\r\n    dealCards()\r\n    if (this.checkForBlackjack(dealerHand, playerHand) === true) {\r\n      this.setState({\r\n        hitDisabled: true,\r\n        stayDisabled: true,\r\n        restartDisabled: false\r\n      })\r\n    }\r\n    else {\r\n      //get player moves until stay or bust\r\n      //get dealer moves\r\n      //let the ai play\r\n      //let the ai's dealer play\r\n      //add scores\r\n      //clear on restart\r\n    }\r\n\r\n    console.log('start')\r\n  }\r\n\r\n  stay() {\r\n    this.setState({\r\n      hitDisabled: true,\r\n      stayDisabled: true,\r\n      playerDone: true,\r\n    })\r\n    this.getDealerMoves()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box style={gameStyle}>\r\n        <Box style={playerSideStyle}>\r\n          <Box>\r\n            {this.state.message}\r\n          </Box>\r\n          <Box style={dealerStyle}>\r\n            Dealer\r\n            {this.getCards(dealerHand, \"dealer\")}\r\n          </Box>\r\n        <Box style={playerStyle}>\r\n          Player\r\n          {this.getCards(playerHand, \"player\")}\r\n          <div style={gameButtons}>\r\n            <button disabled={this.state.hitDisabled} onClick={() => this.hit(\"player\")} style={gameButton}>HIT</button>\r\n            <button disabled={this.state.stayDisabled} onClick={() => this.stay()} style={gameButton}>STAY</button>\r\n            <button disabled={this.state.restartDisabled} onClick={() => this.startGame()} style={gameButton}>PLAY AGAIN</button>\r\n          </div>\r\n          </Box>\r\n        </Box>\r\n        <Box style={aiSideStyle}>\r\n          <Box>\r\n            {this.state.aiMessage}\r\n          </Box>\r\n          <Box style={dealerStyle}>\r\n            AI Dealer\r\n            {this.getCards(aiDealerHand, \"dealer\")}\r\n          </Box>\r\n          <Box style={aiStyle}>\r\n            AI Player\r\n            {this.getCards(aiPlayerHand, \"aiPlayer\")}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nfunction buildDeck() {\r\n  deck = []\r\n  for (var i = 0; i < 8; i++) {\r\n    for (var j = 2; j < 12; j++) {\r\n      if (j === 10) {\r\n        deck.push(j)\r\n        deck.push(j)\r\n        deck.push(j)\r\n      }\r\n      deck.push(j)\r\n    }\r\n  }\r\n  shuffle(deck)\r\n  aiDeck = deck\r\n  console.log(\"building deck\")\r\n}\r\n\r\nfunction dealCards() {\r\n  playerHand.cards = [];\r\n  dealerHand.cards = [];\r\n  aiPlayerHand.cards = [];\r\n  aiDealerHand.cards = [];\r\n  for (var i = 0; i < 2; i++) {\r\n    playerHand.addCard(deck)\r\n    dealerHand.addCard(deck)\r\n  }\r\n  aiPlayerHand.cards = playerHand.cards.slice()\r\n  aiDealerHand.cards = dealerHand.cards.slice()\r\n  console.log(\"dealing cards\")\r\n}\r\n\r\nfunction getCard(card, index) {\r\n  return (\r\n    <Image key={index.toString()} style={cardStyle} src={cardValues[card]}/>\r\n  );\r\n}\r\n\r\n\r\n\r\nfunction shuffle(array) {\r\n  var currentIndex = array.length,  randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]];\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nexport default BlackjackGame;\r\n"]},"metadata":{},"sourceType":"module"}