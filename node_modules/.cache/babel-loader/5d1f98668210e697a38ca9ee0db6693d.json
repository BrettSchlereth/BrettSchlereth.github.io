{"ast":null,"code":"var _jsxFileName = \"G:\\\\GithubWebsite\\\\portfoliowebsite\\\\src\\\\components\\\\CharterProject.js\";\nimport React from 'react';\nimport initSqlJs from 'sql.js'; //https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\n\nvar database;\n\nclass CharterProject extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadDataset();\n    this.state = {\n      database: null,\n      SQLresponse: null\n    };\n  }\n\n  getQuery(query) {\n    return this.state.database.exec(query)[0][\"values\"];\n  }\n\n  async loadDataset() {\n    const sqlPromise = initSqlJs({\n      locateFile: file => `sql-wasm.wasm`\n    });\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\n\n    try {\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n      var db = new SQL.Database(new Uint8Array(buf));\n      this.setState({\n        database: db\n      });\n    } catch (err) {\n      console.log(err);\n      console.log(\"Failed to load database\");\n    }\n\n    console.log(\"db: \", this.state.database);\n  }\n\n  showSomething() {\n    //console.log(\"response: \", this.state.database.exec(\"SELECT * FROM transactionData WHERE CustomerName='John'\")[0][\"values\"])\n    this.setState({\n      SQLresponse: this.getQuery(\"SELECT DISTINCT CustomerName FROM transactionData\")\n    });\n  }\n\n  printData(data) {\n    if (this.state.database != null) {\n      var output = \"hello\";\n      console.log(\"data: \", data); // for (var item in data) {\n      //   console.log(\"item\", item)\n      //   output = output.concat(item)\n      // }\n\n      return output;\n    } else return \"goodbye\";\n  } // var db = new SQL.Database(new Uint8Array(buf));\n  // console.log(\"db: \", db)\n  // return db\n  // const db = new SQL.Database(new Uint8Array(buf));\n  // this.setState({\n  //   database: new SQL.Database(new Uint8Array(buf))\n  // })\n  // res = db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")\n  // this.setState({\n  //   SQLresponse: db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0][2]\n  // })\n  //{this.state.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]}\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, this.printData(this.state.SQLresponse), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.showSomething(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \" hit me \"));\n  }\n\n}\n\nexport default CharterProject;","map":{"version":3,"sources":["G:/GithubWebsite/portfoliowebsite/src/components/CharterProject.js"],"names":["React","initSqlJs","database","CharterProject","Component","constructor","props","loadDataset","state","SQLresponse","getQuery","query","exec","sqlPromise","locateFile","file","dataPromise","fetch","then","res","arrayBuffer","SQL","buf","Promise","all","db","Database","Uint8Array","setState","err","console","log","showSomething","printData","data","output","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,QAAtB,C,CAGA;;AAIA,IAAIC,QAAJ;;AAEA,MAAMC,cAAN,SAA6BH,KAAK,CAACI,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL;AACA,SAAKC,KAAL,GAAW;AACTN,MAAAA,QAAQ,EAAE,IADD;AAETO,MAAAA,WAAW,EAAE;AAFJ,KAAX;AAKD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,WAAO,KAAKH,KAAL,CAAWN,QAAX,CAAoBU,IAApB,CAAyBD,KAAzB,EAAgC,CAAhC,EAAmC,QAAnC,CAAP;AACD;;AAED,QAAMJ,WAAN,GAAqB;AACnB,UAAMM,UAAU,GAAGZ,SAAS,CAAC;AAACa,MAAAA,UAAU,EAAEC,IAAI,IAAK;AAAtB,KAAD,CAA5B;AACA,UAAMC,WAAW,GAAGC,KAAK,CAAC,uBAAD,CAAL,CAA+BC,IAA/B,CAAoCC,GAAG,IAAIA,GAAG,CAACC,WAAJ,EAA3C,CAApB;;AACA,QAAI;AACF,YAAM,CAACC,GAAD,EAAMC,GAAN,IAAa,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACX,UAAD,EAAaG,WAAb,CAAZ,CAAzB;AACE,UAAIS,EAAE,GAAG,IAAIJ,GAAG,CAACK,QAAR,CAAiB,IAAIC,UAAJ,CAAeL,GAAf,CAAjB,CAAT;AACA,WAAKM,QAAL,CAAc;AACZ1B,QAAAA,QAAQ,EAAEuB;AADE,OAAd;AAGH,KAND,CAOA,OAAOI,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;;AACDD,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKvB,KAAL,CAAWN,QAA/B;AACD;;AAED8B,EAAAA,aAAa,GAAG;AACd;AACA,SAAKJ,QAAL,CAAc;AACZnB,MAAAA,WAAW,EAAE,KAAKC,QAAL,CAAc,mDAAd;AADD,KAAd;AAGD;;AAEDuB,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,QAAI,KAAK1B,KAAL,CAAWN,QAAX,IAAuB,IAA3B,EAAiC;AAC/B,UAAIiC,MAAM,GAAG,OAAb;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBG,IAArB,EAF+B,CAG/B;AACA;AACA;AACA;;AACA,aAAOC,MAAP;AACD,KARD,MASK,OAAO,SAAP;AACN,GAnD0C,CAoD3C;AACA;AACA;AAGE;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACJ;;;AAEEC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKH,SAAL,CAAe,KAAKzB,KAAL,CAAWC,WAA1B,CADH,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKuB,aAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,CADF;AAKD;;AA3E0C;;AA8E7C,eAAe7B,cAAf","sourcesContent":["import React from 'react';\r\nimport initSqlJs from 'sql.js';\r\n\r\n\r\n//https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\r\n\r\n\r\n\r\nvar database\r\n\r\nclass CharterProject extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.loadDataset()\r\n    this.state={\r\n      database: null,\r\n      SQLresponse: null\r\n    }\r\n\r\n  }\r\n\r\n  getQuery(query) {\r\n    return this.state.database.exec(query)[0][\"values\"]\r\n  }\r\n\r\n  async loadDataset () {\r\n    const sqlPromise = initSqlJs({locateFile: file => `sql-wasm.wasm`});\r\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\r\n    try {\r\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n        var db = new SQL.Database(new Uint8Array(buf));\r\n        this.setState({\r\n          database: db\r\n        })\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n      console.log(\"Failed to load database\")\r\n    }\r\n    console.log(\"db: \", this.state.database)\r\n  }\r\n\r\n  showSomething() {\r\n    //console.log(\"response: \", this.state.database.exec(\"SELECT * FROM transactionData WHERE CustomerName='John'\")[0][\"values\"])\r\n    this.setState({\r\n      SQLresponse: this.getQuery(\"SELECT DISTINCT CustomerName FROM transactionData\")\r\n    })\r\n  }\r\n\r\n  printData(data) {\r\n    if (this.state.database != null) {\r\n      var output = \"hello\"\r\n      console.log(\"data: \",data)\r\n      // for (var item in data) {\r\n      //   console.log(\"item\", item)\r\n      //   output = output.concat(item)\r\n      // }\r\n      return output\r\n    }\r\n    else return \"goodbye\"\r\n  }\r\n  // var db = new SQL.Database(new Uint8Array(buf));\r\n  // console.log(\"db: \", db)\r\n  // return db\r\n\r\n\r\n    // const db = new SQL.Database(new Uint8Array(buf));\r\n\r\n    // this.setState({\r\n    //   database: new SQL.Database(new Uint8Array(buf))\r\n    // })\r\n    // res = db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")\r\n\r\n    // this.setState({\r\n    //   SQLresponse: db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0][2]\r\n    // })\r\n//{this.state.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]}\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        {this.printData(this.state.SQLresponse)}\r\n        <button onClick={() => this.showSomething()}> hit me </button>\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default CharterProject;\r\n"]},"metadata":{},"sourceType":"module"}