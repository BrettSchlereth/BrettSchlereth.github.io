{"ast":null,"code":"var _jsxFileName = \"G:\\\\GithubWebsite\\\\portfoliowebsite\\\\src\\\\components\\\\CharterProject.js\";\nimport React from 'react';\nimport initSqlJs from 'sql.js';\nresonse_object.header(\"Access-Control-Allow-Origin\", \"*\");\nresonse_object.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); //https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\n\nclass CharterProject extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadDataset();\n  }\n\n  async loadDataset() {\n    const SQL = await initSqlJs({\n      // Required to load the wasm binary asynchronously. Of course, you can host it wherever you want\n      // You can omit locateFile completely when running in node\n      locateFile: file => `sql-wasm.wasm`\n    }); // const sqlPromise = initSqlJs({\n    // locateFile: file => `transactionSQL.sqlite`\n    // });\n    // const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\n    // const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\n    // const db = new SQL.Database(new Uint8Array(buf));\n    // console.log(\"db: \", db)\n\n    const xhr = new XMLHttpRequest(); // For example: https://github.com/lerocha/chinook-database/raw/master/ChinookDatabase/DataSources/Chinook_Sqlite.sqlite\n\n    xhr.open('GET', 'https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true', true);\n    xhr.responseType = 'arraybuffer';\n\n    xhr.onload = e => {\n      const uInt8Array = new Uint8Array(xhr.response);\n      const db = new SQL.Database(uInt8Array);\n      const contents = db.exec(\"SELECT * FROM my_table\"); // contents is now [{columns:['col1','col2',...], values:[[first row], [second row], ...]}]\n    };\n\n    xhr.send();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, \"returned from script again\");\n  }\n\n}\n\nexport default CharterProject;","map":{"version":3,"sources":["G:/GithubWebsite/portfoliowebsite/src/components/CharterProject.js"],"names":["React","initSqlJs","resonse_object","header","CharterProject","Component","constructor","props","loadDataset","SQL","locateFile","file","xhr","XMLHttpRequest","open","responseType","onload","e","uInt8Array","Uint8Array","response","db","Database","contents","exec","send","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,QAAtB;AAEAC,cAAc,CAACC,MAAf,CAAsB,6BAAtB,EAAqD,GAArD;AACAD,cAAc,CAACC,MAAf,CAAsB,8BAAtB,EAAsD,gDAAtD,E,CACA;;AAGA,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL;AACD;;AAED,QAAMA,WAAN,GAAqB;AAEnB,UAAMC,GAAG,GAAG,MAAMR,SAAS,CAAC;AAC1B;AACA;AACAS,MAAAA,UAAU,EAAEC,IAAI,IAAK;AAHK,KAAD,CAA3B,CAFmB,CAQnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ,CAhBmB,CAiBnB;;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgB,sFAAhB,EAAwG,IAAxG;AACAF,IAAAA,GAAG,CAACG,YAAJ,GAAmB,aAAnB;;AAEAH,IAAAA,GAAG,CAACI,MAAJ,GAAaC,CAAC,IAAI;AAChB,YAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeP,GAAG,CAACQ,QAAnB,CAAnB;AACA,YAAMC,EAAE,GAAG,IAAIZ,GAAG,CAACa,QAAR,CAAiBJ,UAAjB,CAAX;AACA,YAAMK,QAAQ,GAAGF,EAAE,CAACG,IAAH,CAAQ,wBAAR,CAAjB,CAHgB,CAIhB;AACD,KALD;;AAMAZ,IAAAA,GAAG,CAACa,IAAJ;AACD;;AAGDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF;AAID;;AA3C0C;;AA8C7C,eAAetB,cAAf","sourcesContent":["import React from 'react';\r\nimport initSqlJs from 'sql.js';\r\n\r\nresonse_object.header(\"Access-Control-Allow-Origin\", \"*\");\r\nresonse_object.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n//https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\r\n\r\n\r\nclass CharterProject extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.loadDataset()\r\n  }\r\n\r\n  async loadDataset () {\r\n\r\n    const SQL = await initSqlJs({\r\n      // Required to load the wasm binary asynchronously. Of course, you can host it wherever you want\r\n      // You can omit locateFile completely when running in node\r\n      locateFile: file => `sql-wasm.wasm`\r\n    })\r\n\r\n    // const sqlPromise = initSqlJs({\r\n    // locateFile: file => `transactionSQL.sqlite`\r\n    // });\r\n    // const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\r\n    // const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n    // const db = new SQL.Database(new Uint8Array(buf));\r\n    // console.log(\"db: \", db)\r\n\r\n    const xhr = new XMLHttpRequest();\r\n    // For example: https://github.com/lerocha/chinook-database/raw/master/ChinookDatabase/DataSources/Chinook_Sqlite.sqlite\r\n    xhr.open('GET', 'https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true', true);\r\n    xhr.responseType = 'arraybuffer';\r\n\r\n    xhr.onload = e => {\r\n      const uInt8Array = new Uint8Array(xhr.response);\r\n      const db = new SQL.Database(uInt8Array);\r\n      const contents = db.exec(\"SELECT * FROM my_table\");\r\n      // contents is now [{columns:['col1','col2',...], values:[[first row], [second row], ...]}]\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        returned from script again\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default CharterProject;\r\n"]},"metadata":{},"sourceType":"module"}