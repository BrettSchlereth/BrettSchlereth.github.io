{"ast":null,"code":"var _jsxFileName = \"G:\\\\GithubWebsite\\\\portfoliowebsite\\\\src\\\\components\\\\CharterProject.js\";\nimport React from 'react'; //https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\n\nconst initSqlJs = require('sql.js');\n\nclass CharterProject extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadDataset();\n  }\n\n  async loadDataset() {\n    // const SQL = await initSqlJs({\n    //   // Required to load the wasm binary asynchronously. Of course, you can host it wherever you want\n    //   // You can omit locateFile completely when running in node\n    //   locateFile: file => `https://sql.js.org/dist/${file}`\n    // })\n    const sqlPromise = initSqlJs({\n      locateFile: file => `transactionSQL.sqlite`\n    });\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\n    const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n    const db = new SQL.Database(new Uint8Array(buf));\n    console.log(\"db: \", db);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, \"returned from script again\");\n  }\n\n}\n\nexport default CharterProject;","map":{"version":3,"sources":["G:/GithubWebsite/portfoliowebsite/src/components/CharterProject.js"],"names":["React","initSqlJs","require","CharterProject","Component","constructor","props","loadDataset","sqlPromise","locateFile","file","dataPromise","fetch","then","res","arrayBuffer","SQL","buf","Promise","all","db","Database","Uint8Array","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAAC,QAAD,CAAzB;;AAGA,MAAMC,cAAN,SAA6BH,KAAK,CAACI,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL;AACD;;AAED,QAAMA,WAAN,GAAqB;AAEnB;AACA;AACA;AACA;AACA;AAEA,UAAMC,UAAU,GAAGP,SAAS,CAAC;AAC7BQ,MAAAA,UAAU,EAAEC,IAAI,IAAK;AADQ,KAAD,CAA5B;AAGA,UAAMC,WAAW,GAAGC,KAAK,CAAC,uBAAD,CAAL,CAA+BC,IAA/B,CAAoCC,GAAG,IAAIA,GAAG,CAACC,WAAJ,EAA3C,CAApB;AACA,UAAM,CAACC,GAAD,EAAMC,GAAN,IAAa,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACX,UAAD,EAAaG,WAAb,CAAZ,CAAzB;AACA,UAAMS,EAAE,GAAG,IAAIJ,GAAG,CAACK,QAAR,CAAiB,IAAIC,UAAJ,CAAeL,GAAf,CAAjB,CAAX;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,EAApB;AACD;;AAGDK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF;AAID;;AA9B0C;;AAiC7C,eAAetB,cAAf","sourcesContent":["import React from 'react';\r\n\r\n//https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\r\n\r\nconst initSqlJs = require('sql.js');\r\n\r\n\r\nclass CharterProject extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.loadDataset()\r\n  }\r\n\r\n  async loadDataset () {\r\n\r\n    // const SQL = await initSqlJs({\r\n    //   // Required to load the wasm binary asynchronously. Of course, you can host it wherever you want\r\n    //   // You can omit locateFile completely when running in node\r\n    //   locateFile: file => `https://sql.js.org/dist/${file}`\r\n    // })\r\n\r\n    const sqlPromise = initSqlJs({\r\n    locateFile: file => `transactionSQL.sqlite`\r\n    });\r\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\r\n    const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n    const db = new SQL.Database(new Uint8Array(buf));\r\n    console.log(\"db: \", db)\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        returned from script again\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default CharterProject;\r\n"]},"metadata":{},"sourceType":"module"}