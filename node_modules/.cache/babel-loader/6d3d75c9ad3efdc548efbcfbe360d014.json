{"ast":null,"code":"var _jsxFileName = \"G:\\\\GithubWebsite\\\\portfoliowebsite\\\\src\\\\components\\\\CharterProject.js\";\nimport React from 'react';\nimport initSqlJs from 'sql.js';\nconst buttonStyle = {\n  false: {\n    textAlign: 'center',\n    height: '10%',\n    width: '25%',\n    backgroundColor: \"white\",\n    color: \"black\",\n    fontSize: \"1.5em\",\n    borderRadius: '5px',\n    border: '1px solid black',\n    fontWeight: 'bold'\n  },\n  true: {\n    textAlign: 'center',\n    height: '10%',\n    width: '25%',\n    backgroundColor: \"gray\",\n    color: \"black\",\n    fontSize: \"1.5em\",\n    borderRadius: '5px',\n    border: '1px solid black',\n    fontWeight: 'bold'\n  }\n};\nconst dataStyle = {\n  whiteSpace: 'pre-wrap'\n};\n\nclass CharterProject extends React.Component {\n  constructor(props) {\n    super(props); //Loads the dataset at the starting of the page\n\n    this.loadDataset();\n    this.state = {\n      database: null,\n      points: null\n    };\n  } //Given one customer's name, this will return the customer's total points\n  //earned from all of their transactions\n\n\n  calculatePoints(name, startingMonth) {\n    //Queries the SQLite file for the customer's transactions\n    var amounts = this.getQuery(\"SELECT Amount FROM transactionData WHERE CustomerName='\" + name + \"'\" + \" GROUP BY 'Month'\"); //strftime('%m',\" + startingMonth + \")\n\n    console.log(name, \"amounts: \", amounts);\n    let points = 0; //Calculates the points based on the transaction amount\n\n    for (var i = 0; i < amounts.length; i++) {\n      var amount = Math.floor(amounts[i][0]);\n\n      if (amount > 100) {\n        points += 2 * (amount - 100) + 50;\n      } else if (amount > 50) {\n        points += amount - 50;\n      }\n    } //Returns the customer's total points\n\n\n    return points;\n  } //Fetches a list of every customer and calculates each of their point totals\n\n\n  getPoints() {\n    //Queries the SQLite file for a list of every customer name\n    var namesArr = this.getQuery(\"SELECT DISTINCT CustomerName FROM transactionData\"); //Creates a dictionary that will hold each customer's name and their total points\n\n    var names = {}; //Assigns the total points to each name\n\n    for (var i = 0; i < namesArr.length; i++) {\n      names[namesArr[i][0]] = this.calculatePoints(namesArr[i][0], \"2021-10\");\n    } //Sets the points state to equal a string with all of the names and points\n\n\n    this.setState({\n      points: this.printData(names)\n    });\n  } //Returns the values of a given SQL query\n\n\n  getQuery(query) {\n    return this.state.database.exec(query)[0][\"values\"];\n  } //Disables the button after pressing the button\n\n\n  isDisabled() {\n    if (this.state.points != null) {\n      return true;\n    }\n\n    return false;\n  } //Fetches the database from the public files and stores it in the db state value\n\n\n  async loadDataset() {\n    const sqlPromise = initSqlJs({\n      locateFile: file => `sql-wasm.wasm`\n    });\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\n\n    try {\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n      var db = new SQL.Database(new Uint8Array(buf));\n      this.setState({\n        database: db\n      });\n    } //Throws an error if the database fails to load\n    catch (err) {\n      console.log(err);\n      console.log(\"Failed to load database\");\n    }\n  } //Formats the given dictionary into a string format to be printed on screen\n\n\n  printData(data) {\n    if (data != null) {\n      var output = \"\";\n\n      for (const [key, value] of Object.entries(data)) {\n        output += String(key) + \": \" + String(value) + \"\\n\";\n      }\n\n      return output;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: dataStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, this.state.points), /*#__PURE__*/React.createElement(\"button\", {\n      style: buttonStyle[this.isDisabled()],\n      disabled: this.isDisabled(),\n      onClick: () => this.getPoints(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, \" Get Points \"));\n  }\n\n}\n\nexport default CharterProject;","map":{"version":3,"sources":["G:/GithubWebsite/portfoliowebsite/src/components/CharterProject.js"],"names":["React","initSqlJs","buttonStyle","false","textAlign","height","width","backgroundColor","color","fontSize","borderRadius","border","fontWeight","true","dataStyle","whiteSpace","CharterProject","Component","constructor","props","loadDataset","state","database","points","calculatePoints","name","startingMonth","amounts","getQuery","console","log","i","length","amount","Math","floor","getPoints","namesArr","names","setState","printData","query","exec","isDisabled","sqlPromise","locateFile","file","dataPromise","fetch","then","res","arrayBuffer","SQL","buf","Promise","all","db","Database","Uint8Array","err","data","output","key","value","Object","entries","String","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport initSqlJs from 'sql.js';\r\n\r\nconst buttonStyle = {\r\n  false: {\r\n    textAlign: 'center',\r\n    height: '10%',\r\n    width: '25%',\r\n    backgroundColor: \"white\",\r\n    color: \"black\",\r\n    fontSize: \"1.5em\",\r\n    borderRadius: '5px',\r\n    border: '1px solid black',\r\n    fontWeight: 'bold',\r\n  },\r\n  true: {\r\n    textAlign: 'center',\r\n    height: '10%',\r\n    width: '25%',\r\n    backgroundColor: \"gray\",\r\n    color: \"black\",\r\n    fontSize: \"1.5em\",\r\n    borderRadius: '5px',\r\n    border: '1px solid black',\r\n    fontWeight: 'bold',\r\n  }\r\n};\r\n\r\nconst dataStyle = {\r\n  whiteSpace: 'pre-wrap'\r\n}\r\n\r\nclass CharterProject extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //Loads the dataset at the starting of the page\r\n    this.loadDataset()\r\n    this.state={\r\n      database: null,\r\n      points: null,\r\n    }\r\n  }\r\n\r\n  //Given one customer's name, this will return the customer's total points\r\n  //earned from all of their transactions\r\n  calculatePoints(name, startingMonth) {\r\n    //Queries the SQLite file for the customer's transactions\r\n    var amounts = this.getQuery(\"SELECT Amount FROM transactionData WHERE CustomerName='\" + name + \"'\" +\r\n    \" GROUP BY 'Month'\")\r\n    //strftime('%m',\" + startingMonth + \")\r\n    console.log(name, \"amounts: \", amounts)\r\n\r\n    let points = 0\r\n    //Calculates the points based on the transaction amount\r\n    for (var i = 0; i < amounts.length; i++) {\r\n      var amount = Math.floor(amounts[i][0])\r\n      if (amount > 100) {\r\n        points += 2 * (amount - 100) + 50\r\n      }\r\n      else if (amount > 50) {\r\n        points += (amount - 50)\r\n      }\r\n    }\r\n    //Returns the customer's total points\r\n    return points\r\n  }\r\n\r\n  //Fetches a list of every customer and calculates each of their point totals\r\n  getPoints() {\r\n    //Queries the SQLite file for a list of every customer name\r\n    var namesArr = this.getQuery(\"SELECT DISTINCT CustomerName FROM transactionData\")\r\n    //Creates a dictionary that will hold each customer's name and their total points\r\n    var names = {}\r\n    //Assigns the total points to each name\r\n    for (var i = 0; i < namesArr.length; i++) {\r\n      names[namesArr[i][0]] = this.calculatePoints(namesArr[i][0], \"2021-10\");\r\n    }\r\n    //Sets the points state to equal a string with all of the names and points\r\n    this.setState({\r\n      points: this.printData(names)\r\n    })\r\n  }\r\n\r\n  //Returns the values of a given SQL query\r\n  getQuery(query) {\r\n    return this.state.database.exec(query)[0][\"values\"]\r\n  }\r\n\r\n  //Disables the button after pressing the button\r\n  isDisabled() {\r\n    if (this.state.points != null) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  //Fetches the database from the public files and stores it in the db state value\r\n  async loadDataset () {\r\n    const sqlPromise = initSqlJs({locateFile: file => `sql-wasm.wasm`});\r\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\r\n    try {\r\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n        var db = new SQL.Database(new Uint8Array(buf));\r\n        this.setState({\r\n          database: db\r\n        })\r\n    }\r\n    //Throws an error if the database fails to load\r\n    catch (err) {\r\n      console.log(err);\r\n      console.log(\"Failed to load database\")\r\n    }\r\n  }\r\n\r\n  //Formats the given dictionary into a string format to be printed on screen\r\n  printData(data) {\r\n    if (data != null) {\r\n      var output = \"\"\r\n      for (const [key, value] of Object.entries(data)) {\r\n        output += String(key) + \": \" + String(value) + \"\\n\"\r\n      }\r\n      return output\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <p style={dataStyle}>\r\n          {this.state.points}\r\n        </p>\r\n        <button style={buttonStyle[this.isDisabled()]} disabled={this.isDisabled()} onClick={() => this.getPoints()}> Get Points </button>\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default CharterProject;\r\n"]},"metadata":{},"sourceType":"module"}