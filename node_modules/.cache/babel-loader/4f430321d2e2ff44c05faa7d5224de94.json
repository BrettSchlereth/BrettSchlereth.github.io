{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brsch\\\\github\\\\githubWebsite\\\\src\\\\components\\\\CharterProject.js\";\nimport React from 'react';\nimport initSqlJs from 'sql.js'; //https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\n\nconst dataStyle = {\n  whiteSpace: 'pre-wrap'\n};\nvar database;\n\nclass CharterProject extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadDataset();\n    this.state = {\n      database: null,\n      SQLresponse: null\n    };\n  }\n\n  calculatePoints(name) {\n    var amounts = this.getQuery(\"SELECT Amount FROM transactionData WHERE CustomerName='\" + name + \"'\");\n    let points = 0;\n\n    for (var i = 0; i < amounts.length; i++) {\n      var amount = Math.floor(amounts[i][0]);\n\n      if (amount > 100) {\n        points += 2 * (amount - 100) + 50;\n      } else if (amount > 50) {\n        points += amount - 50;\n      }\n    }\n\n    return points;\n  }\n\n  getPoints() {\n    var namesArr = this.getQuery(\"SELECT DISTINCT CustomerName FROM transactionData\");\n    var names = {};\n\n    for (var i = 0; i < namesArr.length; i++) {\n      names[namesArr[i][0]] = this.calculatePoints(namesArr[i][0]);\n    }\n\n    console.log(\"names:\", names);\n    this.setState({\n      SQLresponse: names\n    });\n  }\n\n  getQuery(query) {\n    return this.state.database.exec(query)[0][\"values\"];\n  }\n\n  async loadDataset() {\n    const sqlPromise = initSqlJs({\n      locateFile: file => `sql-wasm.wasm`\n    });\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\n\n    try {\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n      var db = new SQL.Database(new Uint8Array(buf));\n      this.setState({\n        database: db\n      });\n    } catch (err) {\n      console.log(err);\n      console.log(\"Failed to load database\");\n    }\n\n    console.log(\"db: \", this.state.database);\n  } //QUERIES\n  //\"SELECT DISTINCT CustomerName FROM transactionData\"\n\n\n  showSomething() {\n    //console.log(\"response: \", this.state.database.exec(\"SELECT * FROM transactionData WHERE CustomerName='John'\")[0][\"values\"])\n    this.setState({\n      SQLresponse: this.getQuery(\"SELECT Amount FROM transactionData WHERE CustomerName='John'\")\n    });\n    this.getPoints();\n  }\n\n  printData(data) {\n    console.log(\"data:\", data);\n\n    if (data != null) {\n      var output = \"\";\n\n      for (var i = 0; i < data.length; i++) {\n        output += String(data[i]) + \"\\n\";\n      }\n\n      return output;\n    } else return \"goodbye\";\n  } // var db = new SQL.Database(new Uint8Array(buf));\n  // console.log(\"db: \", db)\n  // return db\n  // const db = new SQL.Database(new Uint8Array(buf));\n  // this.setState({\n  //   database: new SQL.Database(new Uint8Array(buf))\n  // })\n  // res = db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")\n  // this.setState({\n  //   SQLresponse: db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0][2]\n  // })\n  //{this.state.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]}\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: dataStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, this.printData(this.state.SQLresponse)), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.showSomething(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, \" hit me \"));\n  }\n\n}\n\nexport default CharterProject;","map":{"version":3,"sources":["C:/Users/brsch/github/githubWebsite/src/components/CharterProject.js"],"names":["React","initSqlJs","dataStyle","whiteSpace","database","CharterProject","Component","constructor","props","loadDataset","state","SQLresponse","calculatePoints","name","amounts","getQuery","points","i","length","amount","Math","floor","getPoints","namesArr","names","console","log","setState","query","exec","sqlPromise","locateFile","file","dataPromise","fetch","then","res","arrayBuffer","SQL","buf","Promise","all","db","Database","Uint8Array","err","showSomething","printData","data","output","String","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport initSqlJs from 'sql.js';\r\n\r\n\r\n//https://github.com/BrettSchlereth/CharterHW/blob/main/transactionSQL.sqlite?raw=true\r\n\r\nconst dataStyle = {\r\n  whiteSpace: 'pre-wrap'\r\n}\r\n\r\nvar database\r\n\r\nclass CharterProject extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.loadDataset()\r\n    this.state={\r\n      database: null,\r\n      SQLresponse: null,\r\n    }\r\n\r\n  }\r\n\r\n  calculatePoints(name) {\r\n    var amounts = this.getQuery(\"SELECT Amount FROM transactionData WHERE CustomerName='\" + name + \"'\")\r\n    let points = 0\r\n    for (var i = 0; i < amounts.length; i++) {\r\n      var amount = Math.floor(amounts[i][0])\r\n      if (amount > 100) {\r\n        points += 2 * (amount - 100) + 50\r\n      }\r\n      else if (amount > 50) {\r\n        points += (amount - 50)\r\n      }\r\n    }\r\n    return points\r\n  }\r\n\r\n  getPoints() {\r\n    var namesArr = this.getQuery(\"SELECT DISTINCT CustomerName FROM transactionData\")\r\n    var names = {}\r\n    for (var i = 0; i < namesArr.length; i++) {\r\n      names[namesArr[i][0]] = this.calculatePoints(namesArr[i][0]);\r\n    }\r\n    console.log(\"names:\", names)\r\n    this.setState({\r\n      SQLresponse: names\r\n    })\r\n  }\r\n\r\n  getQuery(query) {\r\n    return this.state.database.exec(query)[0][\"values\"]\r\n  }\r\n\r\n  async loadDataset () {\r\n    const sqlPromise = initSqlJs({locateFile: file => `sql-wasm.wasm`});\r\n    const dataPromise = fetch(\"transactionSQL.sqlite\").then(res => res.arrayBuffer());\r\n    try {\r\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n        var db = new SQL.Database(new Uint8Array(buf));\r\n        this.setState({\r\n          database: db\r\n        })\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n      console.log(\"Failed to load database\")\r\n    }\r\n    console.log(\"db: \", this.state.database)\r\n  }\r\n\r\n\r\n\r\n  //QUERIES\r\n  //\"SELECT DISTINCT CustomerName FROM transactionData\"\r\n\r\n  showSomething() {\r\n    //console.log(\"response: \", this.state.database.exec(\"SELECT * FROM transactionData WHERE CustomerName='John'\")[0][\"values\"])\r\n    this.setState({\r\n      SQLresponse: this.getQuery(\"SELECT Amount FROM transactionData WHERE CustomerName='John'\")\r\n    })\r\n    this.getPoints()\r\n  }\r\n\r\n  printData(data) {\r\n    console.log(\"data:\", data)\r\n    if (data != null) {\r\n      var output = \"\"\r\n      for (var i = 0; i < data.length; i++) {\r\n        output += String(data[i]) + \"\\n\"\r\n      }\r\n      return output\r\n    }\r\n    else return \"goodbye\"\r\n  }\r\n\r\n\r\n  // var db = new SQL.Database(new Uint8Array(buf));\r\n  // console.log(\"db: \", db)\r\n  // return db\r\n\r\n\r\n    // const db = new SQL.Database(new Uint8Array(buf));\r\n\r\n    // this.setState({\r\n    //   database: new SQL.Database(new Uint8Array(buf))\r\n    // })\r\n    // res = db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")\r\n\r\n    // this.setState({\r\n    //   SQLresponse: db.exec(\"SELECT * FROM transactionData WHERE TransactionId=4\")[0][\"values\"][0][2]\r\n    // })\r\n//{this.state.database.exec(\"SELECT * FROM transactionData WHERE TransactionID=4\")[0][\"values\"][0][2]}\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n      <p style={dataStyle}>\r\n        {this.printData(this.state.SQLresponse)}\r\n      </p>\r\n        <button onClick={() => this.showSomething()}> hit me </button>\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default CharterProject;\r\n"]},"metadata":{},"sourceType":"module"}